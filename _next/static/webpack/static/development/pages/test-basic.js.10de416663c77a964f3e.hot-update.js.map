{"version":3,"file":"static/webpack/static/development/pages/test-basic.js.10de416663c77a964f3e.hot-update.js","sources":["webpack:///./sled/hooks/useDimensions.ts"],"sourcesContent":["\nimport React from 'react'\nimport { debounce } from '../utils/debounce'\nimport { useStateContext } from '../state'\nimport { TRef, TDimension } from '../state/types-defaults'\n\ninterface IProportion {\n  width: TDimension\n  height: TDimension\n  offsetWidth: number\n  offsetHeight: number\n  proportion: string\n  dispatch\n}\n\ninterface IDimensions {\n  width: TDimension\n  height: TDimension\n}\n\nfunction getProportion({\n  width,\n  height,\n  offsetWidth,\n  offsetHeight,\n  proportion,\n  dispatch\n}: IProportion) {\n  if (!proportion) return\n\n  const [proportionWidth, proportionHeight] = proportion.split(':')\n  let dimensions: IDimensions = { width: 0, height: 0 }\n\n  if (width) {\n    const heightValue = (offsetWidth * +proportionHeight) / +proportionWidth\n    dimensions = {\n      width,\n      height: heightValue\n    }\n  } else {\n    const widthValue = (offsetHeight * +proportionWidth) / +proportionHeight\n    dimensions = {\n      width: widthValue,\n      height\n    }\n  }\n\n  dispatch({\n    type: 'SET_DIMENSIONS',\n    dimensions: dimensions\n  })\n}\n\nfunction getDimensions(width: TDimension, height: TDimension, proportion: string, ref: TRef, dispatch) {\n  const { offsetWidth, offsetHeight } = ref.current\n\n}\n\nexport default (ref: TRef) => {\n  const [{ dimensionsDOM, proportion }, dispatch] = useStateContext()\n\n  React.useEffect(() => {\n    const { offsetWidth, offsetHeight } = ref.current\n    getProportion({\n      ...dimensionsDOM,\n      offsetWidth,\n      offsetHeight,\n      proportion,\n      dispatch\n    })\n  }, [dimensionsDOM])\n\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AAEA;AACA;AAgBA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AALA;AAOA;AAEA;;;;A","sourceRoot":""}