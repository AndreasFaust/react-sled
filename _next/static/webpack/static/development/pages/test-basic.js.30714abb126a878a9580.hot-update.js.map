{"version":3,"file":"static/webpack/static/development/pages/test-basic.js.30714abb126a878a9580.hot-update.js","sources":["webpack:///./sled/hooks/useDimensions.ts","webpack:///./sled/hooks/useDimensionsDOM.ts","webpack:///./sled/views.tsx"],"sourcesContent":["\nimport React from 'react'\nimport { debounce } from '../utils/debounce'\nimport { useStateContext } from '../state'\nimport { TRef, TDimension } from '../state/types-defaults'\n\ninterface IProportion {\n  width: TDimension\n  height: TDimension\n  offsetWidth: number\n  offsetHeight: number\n  proportion: string\n  dispatch\n}\n\ninterface IDimensions {\n  width: TDimension\n  height: TDimension\n}\n\nfunction getProportion({\n  width,\n  height,\n  offsetWidth,\n  offsetHeight,\n  proportion,\n  dispatch\n}: IProportion) {\n  if (!proportion) return\n\n  const [proportionWidth, proportionHeight] = proportion.split(':')\n  let dimensions: IDimensions = { width: 0, height: 0 }\n\n  if (width) {\n    const heightValue = (offsetWidth * +proportionHeight) / +proportionWidth\n    dimensions = {\n      width,\n      height: heightValue\n    }\n  } else {\n    const widthValue = (offsetHeight * +proportionWidth) / +proportionHeight\n    dimensions = {\n      width: widthValue,\n      height\n    }\n  }\n\n  dispatch({\n    type: 'SET_DIMENSIONS',\n    dimensions: dimensions\n  })\n}\n\nfunction getDimensions(width: TDimension, height: TDimension, proportion: string, ref: TRef, dispatch) {\n  const { offsetWidth, offsetHeight } = ref.current\n\n}\n\nexport default (ref: TRef) => {\n  const [{ dimensionsDOM, proportion }, dispatch] = useStateContext()\n\n  React.useEffect(() => {\n    const { offsetWidth, offsetHeight } = ref.current\n    getProportion({\n      width,\n      height,\n      offsetWidth,\n      offsetHeight,\n      proportion,\n      dispatch\n    })\n  }, [dimensionsDOM])\n\n}\n","\nimport React from 'react'\nimport { useStateContext, TDimension } from '../state'\n\nexport default (width: TDimension, height: TDimension) => {\n  const [, dispatch] = useStateContext()\n\n  React.useEffect(() => {\n    if (!width && !height) {\n      dispatch({\n        type: 'SET_DIMENSIONS_DOM',\n        dimensionsDOM: { width: '100%', height: null }\n      })\n      dispatch({ type: 'SET_PROPORTION', proportion: '2:1' })\n      return\n    }\n\n    dispatch({\n      type: 'SET_DIMENSIONS_DOM',\n      dimensionsDOM: { width, height }\n    })\n\n  }, [width, height])\n\n}\n","import React, { useRef } from 'react'\n\nimport Springs from './springs'\nimport { IViewsProps, ViewsProps } from './state/types-defaults'\n\nimport useDirection from './hooks/useDirection'\nimport useDimensionsDOM from './hooks/useDimensionsDOM'\nimport useDimensions from './hooks/useDimensions'\nimport useProportion from './hooks/useProportion'\nimport useKeyboard from './hooks/useKeyboard'\nimport useDragging from './hooks/useDragging'\nimport useMouseOver from './hooks/useMouseOver'\nimport useSelect from './hooks/useSelect'\nimport useFocus from './hooks/useFocus'\nimport useViewCount from './hooks/useViewCount'\nimport useAutoPlay from './hooks/useAutoPlay'\nimport useConfig from './hooks/useConfig'\nimport useRewind from './hooks/useRewind'\nimport usePause from './hooks/usePause'\nimport useStopOnInteraction from './hooks/useStopOnInteraction'\nimport useShowElements from './hooks/useShowElements'\nimport useSlideBy from './hooks/useSlideBy'\nimport useSlideSteps from './hooks/useSlideSteps'\nimport useSliderSize from './hooks/useSliderSize'\nimport { useStateContext } from './state'\nimport './index.css'\n\nconst SledViews: React.FC<IViewsProps> = ({\n  children,\n  style,\n  width,\n  height,\n  proportion,\n  direction,\n  select,\n  slideBy,\n  showElements,\n  keyboard,\n  dragging,\n  dragDistance,\n  autoPlayInterval,\n  config,\n  pauseOnMouseOver,\n  stopOnInteraction,\n  rewind,\n  pause,\n  onSledEnd,\n  onAnimationStart,\n  onAnimationEnd\n}) => {\n\n  const viewsRef = useRef<HTMLDivElement>()\n  const [{ dimensions, dimensionsDOM }] = useStateContext()\n\n\n  useProportion(width, height, proportion)\n  useDimensionsDOM(width, height)\n  useDimensions(viewsRef)\n\n  useDirection(direction)\n\n  useFocus(viewsRef)\n  useViewCount(children)\n  useRewind(rewind)\n  usePause(pause)\n\n  useShowElements(showElements)\n  useSlideBy(slideBy)\n  useSliderSize()\n  useSlideSteps()\n\n  useStopOnInteraction(stopOnInteraction)\n  useMouseOver(pauseOnMouseOver, viewsRef)\n  useSelect(select)\n  useKeyboard(keyboard)\n  useDragging(dragging, dragDistance)\n  useAutoPlay(autoPlayInterval)\n\n  useConfig(config)\n\n  return (\n    <div\n      className='sled'\n      ref={viewsRef}\n      style={{\n        ...dimensionsDOM,\n        ...style,\n      }}\n      tabIndex={0}\n    >\n      <div\n        className='sled-sizer'\n        style={dimensions}\n      >\n        <Springs\n          onAnimationStart={onAnimationStart}\n          onAnimationEnd={onAnimationEnd}\n          onSledEnd={onSledEnd}\n        >\n          {children}\n        </Springs>\n      </div>\n    </div>\n  )\n}\n\nSledViews.defaultProps = ViewsProps\n\nexport default SledViews\n"],"mappings":";;;;;;;;;;;;;;;;AACA;AAEA;AACA;AAgBA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAEA;;;;;;;;;;;;;;;;;;ACxEA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAFA;AAIA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAFA;AAKA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxBA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAsBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAIA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;AAEA;;;;A","sourceRoot":""}