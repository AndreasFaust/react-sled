{"version":3,"file":"static/webpack/static/development/pages/test.js.27c0e86d5760437d7d64.hot-update.js","sources":["webpack:///./sled/hooks/useDimensions.ts","webpack:///./sled/utils/debounce.ts"],"sourcesContent":["\nimport React from 'react'\nimport { debounce } from '../utils/debounce'\nimport { useStateContext } from '../state'\nimport { TRef, TDimension } from '../state/types-defaults'\n\ninterface IProportion {\n  width: TDimension\n  height: TDimension\n  offsetWidth: number\n  offsetHeight: number\n  proportion: string\n  dispatch\n}\n\ninterface IDimensions {\n  width: TDimension\n  height: TDimension\n}\n\nfunction getProportion({\n  width,\n  height,\n  offsetWidth,\n  offsetHeight,\n  proportion,\n  dispatch\n}: IProportion) {\n  if (!proportion) return\n\n  const [proportionWidth, proportionHeight] = proportion.split(':')\n  let dimensions: IDimensions = { width: 0, height: 0 }\n\n  if (width) {\n    const heightValue = (offsetWidth * +proportionHeight) / +proportionWidth\n    dimensions = {\n      width: offsetWidth,\n      height: heightValue\n    }\n  } else {\n    const widthValue = (offsetHeight * +proportionWidth) / +proportionHeight\n    dimensions = {\n      width: widthValue,\n      height: offsetHeight\n    }\n  }\n  dispatch({\n    type: 'SET_DIMENSIONS',\n    dimensions: dimensions\n  })\n}\n\nexport default (ref: TRef) => {\n  const [{ dimensionsDOM, proportion }, dispatch] = useStateContext()\n\n  React.useEffect(() => {\n    getDimensions(width, height, proportion, ref, dispatch)\n    function onResize() {\n      getDimensions(width, height, proportion, ref, dispatch)\n    }\n    const dOnResize = debounce(onResize, 200)\n    window.addEventListener('resize', dOnResize)\n    return () => window.removeEventListener('resize', dOnResize)\n  }, [width, height, proportion, ref.current])\n\n  React.useEffect(() => {\n    const { offsetWidth, offsetHeight } = ref.current\n    getProportion({\n      ...dimensionsDOM,\n      offsetWidth,\n      offsetHeight,\n      proportion,\n      dispatch\n    })\n    function onResize() {\n      const { offsetWidth, offsetHeight } = ref.current\n      getProportion({\n        ...dimensionsDOM,\n        offsetWidth,\n        offsetHeight,\n        proportion,\n        dispatch\n      })\n    }\n    const dOnResize = debounce(onResize, 200)\n    window.addEventListener('resize', dOnResize)\n    return () => window.removeEventListener('resize', dOnResize)\n\n  }, [dimensionsDOM, proportion])\n\n}\n","// https://github.com/chodorowicz/ts-debounce/blob/master/src/index.ts\n\nexport type Procedure = (...args: any[]) => void;\n\nexport type Options = {\n  isImmediate: boolean,\n}\n\nexport function debounce<F extends Procedure>(\n  func: F,\n  waitMilliseconds = 50,\n  options: Options = {\n    isImmediate: false\n  },\n): F {\n  let timeoutId: ReturnType<typeof setTimeout> | undefined\n\n  return function (this: any, ...args: any[]) {\n    const context = this\n\n    const doLater = function () {\n      timeoutId = undefined\n      if (!options.isImmediate) {\n        func.apply(context, args)\n      }\n    }\n\n    const shouldCallNow = options.isImmediate && timeoutId === undefined\n\n    if (timeoutId !== undefined) {\n      clearTimeout(timeoutId)\n    }\n\n    timeoutId = setTimeout(doLater, waitMilliseconds)\n\n    if (shouldCallNow) {\n      func.apply(context, args)\n    }\n  } as any\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AAgBA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AALA;AACA;AAMA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AALA;AAOA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AAEA;;;;;;;;;;;;AC1FA;AAAA;AAAA;AAQA;AAMA;AAAA;AAFA;AADA;AAIA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}