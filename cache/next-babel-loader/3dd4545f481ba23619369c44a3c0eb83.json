{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport React from 'react';\nimport { debounce } from '../utils/debounce';\nimport { useStateContext } from '../state';\n\nfunction getProportion(_ref) {\n  var width = _ref.width,\n      height = _ref.height,\n      offsetWidth = _ref.offsetWidth,\n      offsetHeight = _ref.offsetHeight,\n      proportion = _ref.proportion,\n      dispatch = _ref.dispatch;\n  console.log(proportion);\n  if (!proportion) return;\n\n  var _proportion$split = proportion.split(':'),\n      _proportion$split2 = _slicedToArray(_proportion$split, 2),\n      proportionWidth = _proportion$split2[0],\n      proportionHeight = _proportion$split2[1];\n\n  var dimensions = {\n    width: 0,\n    height: 0\n  };\n\n  if (width) {\n    var heightValue = offsetWidth * +proportionHeight / +proportionWidth;\n    dimensions = {\n      width: width,\n      height: heightValue\n    };\n  } else {\n    var widthValue = offsetHeight * +proportionWidth / +proportionHeight;\n    dimensions = {\n      width: widthValue,\n      height: height\n    };\n  }\n\n  dispatch({\n    type: 'SET_DIMENSIONS_DOM',\n    dimensionsDOM: dimensions\n  });\n}\n\nfunction getDimensions(width, height, proportion, ref, dispatch) {\n  var _ref$current = ref.current,\n      offsetWidth = _ref$current.offsetWidth,\n      offsetHeight = _ref$current.offsetHeight;\n\n  if (!width && !height) {\n    dispatch({\n      type: 'SET_DIMENSIONS_DOM',\n      dimensionsDOM: {\n        width: '100%'\n      }\n    });\n    return;\n  }\n\n  if (width && height) {\n    dispatch({\n      type: 'SET_DIMENSIONS_DOM',\n      dimensionsDOM: {\n        width: width,\n        height: height\n      }\n    });\n    return;\n  }\n\n  getProportion({\n    width: width,\n    height: height,\n    offsetWidth: offsetWidth,\n    offsetHeight: offsetHeight,\n    proportion: proportion,\n    dispatch: dispatch\n  });\n}\n\nexport default (function (width, height, ref) {\n  var _useStateContext = useStateContext(),\n      _useStateContext2 = _slicedToArray(_useStateContext, 2),\n      _useStateContext2$ = _useStateContext2[0],\n      dimensionsDOM = _useStateContext2$.dimensionsDOM,\n      proportion = _useStateContext2$.proportion,\n      dispatch = _useStateContext2[1];\n\n  React.useEffect(function () {\n    getDimensions(width, height, proportion, ref, dispatch);\n\n    function onResize() {\n      getDimensions(width, height, proportion, ref, dispatch);\n    }\n\n    var dOnResize = debounce(onResize, 200);\n    window.addEventListener('resize', dOnResize);\n    return function () {\n      return window.removeEventListener('resize', dOnResize);\n    };\n  }, [width, height, proportion, ref.current]);\n  React.useEffect(function () {\n    var _ref$current2 = ref.current,\n        offsetWidth = _ref$current2.offsetWidth,\n        offsetHeight = _ref$current2.offsetHeight;\n    dispatch({\n      type: 'SET_DIMENSIONS',\n      dimensions: {\n        width: offsetWidth,\n        height: offsetHeight\n      }\n    });\n  }, [dimensionsDOM]);\n});","map":{"version":3,"sources":["/Users/andreasfaust/components/react-sled/sled/hooks/useDimensions.ts"],"names":["React","debounce","useStateContext","getProportion","width","height","offsetWidth","offsetHeight","proportion","dispatch","console","log","split","proportionWidth","proportionHeight","dimensions","heightValue","widthValue","type","dimensionsDOM","getDimensions","ref","current","useEffect","onResize","dOnResize","window","addEventListener","removeEventListener"],"mappings":"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","sourcesContent":["\nimport React from 'react'\nimport { debounce } from '../utils/debounce'\nimport { useStateContext } from '../state'\nimport { TRef, TDimension } from '../state/types-defaults'\n\ninterface IProportion {\n  width: TDimension\n  height: TDimension\n  offsetWidth: number\n  offsetHeight: number\n  proportion: string\n  dispatch\n}\n\ninterface IDimensions {\n  width: TDimension\n  height: TDimension\n}\n\nfunction getProportion({\n  width,\n  height,\n  offsetWidth,\n  offsetHeight,\n  proportion,\n  dispatch\n}: IProportion) {\n  console.log(proportion)\n  if (!proportion) return\n\n  const [proportionWidth, proportionHeight] = proportion.split(':')\n  let dimensions: IDimensions = { width: 0, height: 0 }\n\n  if (width) {\n    const heightValue = (offsetWidth * +proportionHeight) / +proportionWidth\n    dimensions = {\n      width,\n      height: heightValue\n    }\n  } else {\n    const widthValue = (offsetHeight * +proportionWidth) / +proportionHeight\n    dimensions = {\n      width: widthValue,\n      height\n    }\n  }\n\n  dispatch({\n    type: 'SET_DIMENSIONS_DOM',\n    dimensionsDOM: dimensions\n  })\n}\n\nfunction getDimensions(width: TDimension, height: TDimension, proportion: string, ref: TRef, dispatch) {\n  const { offsetWidth, offsetHeight } = ref.current\n\n  if (!width && !height) {\n    dispatch({\n      type: 'SET_DIMENSIONS_DOM',\n      dimensionsDOM: { width: '100%' }\n    })\n    return\n  }\n\n  if (width && height) {\n    dispatch({\n      type: 'SET_DIMENSIONS_DOM',\n      dimensionsDOM: { width, height }\n    })\n    return\n  }\n\n  getProportion({ width, height, offsetWidth, offsetHeight, proportion, dispatch })\n}\n\nexport default (width: TDimension, height: TDimension, ref: TRef) => {\n  const [{ dimensionsDOM, proportion }, dispatch] = useStateContext()\n\n  React.useEffect(() => {\n    getDimensions(width, height, proportion, ref, dispatch)\n    function onResize() {\n      getDimensions(width, height, proportion, ref, dispatch)\n    }\n    const dOnResize = debounce(onResize, 200)\n    window.addEventListener('resize', dOnResize)\n    return () => window.removeEventListener('resize', dOnResize)\n  }, [width, height, proportion, ref.current])\n\n  React.useEffect(() => {\n    const { offsetWidth, offsetHeight } = ref.current\n    dispatch({\n      type: 'SET_DIMENSIONS',\n      dimensions: { width: offsetWidth, height: offsetHeight }\n    })\n  }, [dimensionsDOM])\n\n}\n"]},"metadata":{},"sourceType":"module"}