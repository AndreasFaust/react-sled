{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from 'react';\nimport { useStateContext } from '../../state';\nexport var useDirectionDisabled = function useDirectionDisabled(select) {\n  var _useStateContext = useStateContext(),\n      _useStateContext2 = _slicedToArray(_useStateContext, 1),\n      _useStateContext2$ = _useStateContext2[0],\n      rewind = _useStateContext2$.rewind,\n      currentIndex = _useStateContext2$.currentIndex,\n      viewCount = _useStateContext2$.viewCount;\n\n  var _useState = useState(false),\n      disabled = _useState[0],\n      setDisabled = _useState[1];\n\n  useEffect(function () {\n    if (typeof select === 'string') {\n      if (rewind) {\n        setDisabled(false);\n        return;\n      }\n\n      if (select === 'next' && currentIndex === viewCount - 1) {\n        setDisabled(true);\n      } else if (select === 'prev' && currentIndex === 0) {\n        setDisabled(true);\n      } else {\n        setDisabled(false);\n      }\n    }\n  }, [currentIndex, rewind]);\n  return disabled;\n};","map":{"version":3,"sources":["/Users/andreasfaust/components/react-sled/sled/control/hooks/useDirectionDisabled.ts"],"names":["useState","useEffect","useStateContext","useDirectionDisabled","select","rewind","currentIndex","viewCount","disabled","setDisabled"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,eAAT,QAAgC,aAAhC;AAGA,OAAO,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,MAAD,EAAqB;AAAA,yBACTF,eAAe,EADN;AAAA;AAAA;AAAA,MAC9CG,MAD8C,sBAC9CA,MAD8C;AAAA,MACtCC,YADsC,sBACtCA,YADsC;AAAA,MACxBC,SADwB,sBACxBA,SADwB;;AAAA,kBAEvBP,QAAQ,CAAU,KAAV,CAFe;AAAA,MAEhDQ,QAFgD;AAAA,MAEtCC,WAFsC;;AAGvDR,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI,OAAOG,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,UAAIC,MAAJ,EAAY;AACVI,QAAAA,WAAW,CAAC,KAAD,CAAX;AACA;AACD;;AACD,UAAIL,MAAM,KAAK,MAAX,IAAqBE,YAAY,KAAKC,SAAS,GAAG,CAAtD,EAAyD;AACvDE,QAAAA,WAAW,CAAC,IAAD,CAAX;AACD,OAFD,MAEO,IAAIL,MAAM,KAAK,MAAX,IAAqBE,YAAY,KAAK,CAA1C,EAA6C;AAClDG,QAAAA,WAAW,CAAC,IAAD,CAAX;AACD,OAFM,MAEA;AACLA,QAAAA,WAAW,CAAC,KAAD,CAAX;AACD;AACF;AACF,GAdQ,EAcN,CAACH,YAAD,EAAeD,MAAf,CAdM,CAAT;AAeA,SAAOG,QAAP;AACD,CAnBM","sourcesContent":["import { useState, useEffect } from 'react'\nimport { useStateContext } from '../../state'\nimport { TSelect } from \"../../state/types-defaults\"\n\nexport const useDirectionDisabled = (select: TSelect) => {\n  const [{ rewind, currentIndex, viewCount }] = useStateContext()\n  const [disabled, setDisabled] = useState<boolean>(false)\n  useEffect(() => {\n    if (typeof select === 'string') {\n      if (rewind) {\n        setDisabled(false)\n        return\n      }\n      if (select === 'next' && currentIndex === viewCount - 1) {\n        setDisabled(true)\n      } else if (select === 'prev' && currentIndex === 0) {\n        setDisabled(true)\n      } else {\n        setDisabled(false)\n      }\n    }\n  }, [currentIndex, rewind])\n  return disabled\n}\n\n"]},"metadata":{},"sourceType":"module"}