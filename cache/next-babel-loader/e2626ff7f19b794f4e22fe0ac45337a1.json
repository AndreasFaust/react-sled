{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport { useStateContext } from '../../state';\nexport const useDirectionDisabled = select => {\n  const [{\n    rewind,\n    currentIndex,\n    viewCount\n  }] = useStateContext();\n  const {\n    0: disabled,\n    1: setDisabled\n  } = useState(false);\n  useEffect(() => {\n    if (typeof select === 'string') {\n      if (rewind) {\n        setDisabled(false);\n        return;\n      }\n\n      if (select === 'next' && currentIndex === viewCount - 1) {\n        setDisabled(true);\n      } else if (select === 'prev' && currentIndex === 0) {\n        setDisabled(true);\n      } else {\n        setDisabled(false);\n      }\n    }\n  }, [currentIndex, rewind]);\n  return disabled;\n};","map":{"version":3,"sources":["/Users/andreasfaust/components/react-sled/sled/control/hooks/useDirectionDisabled.ts"],"names":["useState","useEffect","useStateContext","useDirectionDisabled","select","rewind","currentIndex","viewCount","disabled","setDisabled"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,eAAT,QAAgC,aAAhC;AAGA,OAAO,MAAMC,oBAAoB,GAAIC,MAAD,IAAqB;AACvD,QAAM,CAAC;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,YAAV;AAAwBC,IAAAA;AAAxB,GAAD,IAAwCL,eAAe,EAA7D;AACA,QAAM;AAAA,OAACM,QAAD;AAAA,OAAWC;AAAX,MAA0BT,QAAQ,CAAU,KAAV,CAAxC;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,OAAOG,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,UAAIC,MAAJ,EAAY;AACVI,QAAAA,WAAW,CAAC,KAAD,CAAX;AACA;AACD;;AACD,UAAIL,MAAM,KAAK,MAAX,IAAqBE,YAAY,KAAKC,SAAS,GAAG,CAAtD,EAAyD;AACvDE,QAAAA,WAAW,CAAC,IAAD,CAAX;AACD,OAFD,MAEO,IAAIL,MAAM,KAAK,MAAX,IAAqBE,YAAY,KAAK,CAA1C,EAA6C;AAClDG,QAAAA,WAAW,CAAC,IAAD,CAAX;AACD,OAFM,MAEA;AACLA,QAAAA,WAAW,CAAC,KAAD,CAAX;AACD;AACF;AACF,GAdQ,EAcN,CAACH,YAAD,EAAeD,MAAf,CAdM,CAAT;AAeA,SAAOG,QAAP;AACD,CAnBM","sourcesContent":["import { useState, useEffect } from 'react'\nimport { useStateContext } from '../../state'\nimport { TSelect } from \"../../state/types-defaults\"\n\nexport const useDirectionDisabled = (select: TSelect) => {\n  const [{ rewind, currentIndex, viewCount }] = useStateContext()\n  const [disabled, setDisabled] = useState<boolean>(false)\n  useEffect(() => {\n    if (typeof select === 'string') {\n      if (rewind) {\n        setDisabled(false)\n        return\n      }\n      if (select === 'next' && currentIndex === viewCount - 1) {\n        setDisabled(true)\n      } else if (select === 'prev' && currentIndex === 0) {\n        setDisabled(true)\n      } else {\n        setDisabled(false)\n      }\n    }\n  }, [currentIndex, rewind])\n  return disabled\n}\n\n"]},"metadata":{},"sourceType":"module"}