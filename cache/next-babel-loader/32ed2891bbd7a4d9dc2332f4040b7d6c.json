{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { useStateContext } from '../state';\nexport function useSliderStyles() {\n  const [{\n    sliderSize,\n    direction,\n    dragging\n  }] = useStateContext();\n  const [styles, setStyles] = React.useState({});\n  React.useEffect(() => {\n    const defaultStyles = {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      willChange: 'transform',\n      overflow: 'hidden',\n      cursor: dragging ? 'grab' : 'auto'\n    };\n\n    if (direction === 'vertical') {\n      setStyles(_objectSpread({}, defaultStyles, {\n        width: '100%',\n        height: sliderSize || 0\n      }));\n    } else {\n      setStyles(_objectSpread({}, defaultStyles, {\n        width: sliderSize || 0,\n        height: '100%',\n        display: 'flex'\n      }));\n    }\n  }, [direction, dragging, sliderSize]);\n  return styles;\n}\nexport function useViewStyles() {\n  const [{\n    dimensions: {\n      width,\n      height\n    },\n    viewCount,\n    direction,\n    showElements\n  }] = useStateContext();\n  const [styles, setStyles] = React.useState({});\n  React.useEffect(() => {\n    const defaultStyles = {\n      position: 'relative'\n    };\n\n    if (direction === 'vertical') {\n      setStyles(_objectSpread({}, defaultStyles, {\n        width: '100%',\n        height: height / showElements\n      }));\n    } else {\n      setStyles(_objectSpread({}, defaultStyles, {\n        width: width / showElements,\n        height: '100%'\n      }));\n    }\n  }, [width, height, direction, viewCount, showElements]);\n  return styles;\n}","map":null,"metadata":{},"sourceType":"module"}