{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport { useSpring, animated } from 'react-spring';\nimport { useStateContext } from '../state';\n\nfunction getX(slideSteps, currentIndex, goPrevNext = 0) {\n  return 100 - 100 / slideSteps * (currentIndex + goPrevNext);\n}\n\nconst SledProgressTrack = ({\n  className\n}) => {\n  const [{\n    currentIndex,\n    prevIndex,\n    slideSteps,\n    autoPlayInterval,\n    pause,\n    pauseOnMouseOver,\n    config\n  }] = useStateContext();\n  const [props, set] = useSpring(() => ({\n    from: {\n      x: 100\n    }\n  }));\n  useEffect(() => {\n    if (pauseOnMouseOver) {\n      set({\n        config,\n        x: getX(slideSteps, currentIndex),\n        reset: false\n      });\n    }\n  }, [pauseOnMouseOver]);\n  useEffect(() => {\n    if (!slideSteps) return;\n    const xCalc = getX(slideSteps, currentIndex, !autoPlayInterval && 1);\n\n    if (currentIndex === 0) {\n      set({\n        config,\n        from: {\n          x: 100\n        },\n        x: xCalc,\n        reset: slideSteps > 2 ? prevIndex !== 1 : true\n      });\n    } else {\n      set({\n        config,\n        x: xCalc,\n        reset: false\n      });\n    }\n  }, [slideSteps, currentIndex, autoPlayInterval]);\n  useEffect(() => {\n    if (!autoPlayInterval) return;\n    set({\n      config: autoPlayInterval && !pause ? {\n        duration: autoPlayInterval\n      } : config,\n      from: {\n        x: getX(slideSteps, currentIndex)\n      },\n      x: getX(slideSteps, currentIndex, !pause && 1),\n      reset: true\n    });\n  }, [pause, autoPlayInterval, slideSteps, currentIndex]);\n  return __jsx(animated.div, {\n    className: `sled-progress-${className}-track`,\n    style: {\n      position: 'absolute',\n      left: 0,\n      width: '100%',\n      pointerEvents: 'none',\n      transform: props.x.to(x => `translateX(-${x}%)`)\n    }\n  });\n};\n\nexport default SledProgressTrack;","map":null,"metadata":{},"sourceType":"module"}