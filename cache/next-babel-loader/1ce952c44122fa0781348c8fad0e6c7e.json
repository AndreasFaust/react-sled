{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport { useRef, useEffect } from 'react';\nimport { useStateContext } from '../state';\n\nvar useInterval = function useInterval(callback, interval) {\n  var savedCallback = useRef(callback);\n  useEffect(function () {\n    savedCallback.current = callback;\n  });\n  useEffect(function () {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (typeof interval === 'number') {\n      var id = setInterval(tick, interval);\n      return function () {\n        return clearInterval(id);\n      };\n    }\n  }, [interval]);\n};\n\nexport default (function (autoPlayIntervalNew) {\n  var _useStateContext = useStateContext(),\n      _useStateContext2 = _slicedToArray(_useStateContext, 2),\n      _useStateContext2$ = _useStateContext2[0],\n      pause = _useStateContext2$.pause,\n      autoPlayInterval = _useStateContext2$.autoPlayInterval,\n      dispatch = _useStateContext2[1];\n\n  useEffect(function () {\n    if (typeof autoPlayIntervalNew === 'number') {\n      dispatch({\n        type: 'SET_AUTOPLAY',\n        autoPlayInterval: autoPlayIntervalNew\n      });\n    } else {\n      console.warn(\"Sled-Error: \\\"autoplay\\\" must be of type \\\"number\\\", not \\\"\".concat(typeof autoPlayIntervalNew, \"\\\".\"));\n    }\n  }, [autoPlayIntervalNew]);\n  useInterval(function () {\n    dispatch({\n      type: 'NEXT'\n    });\n  }, !pause && autoPlayInterval);\n});","map":{"version":3,"sources":["/Users/andreasfaust/components/react-sled/sled/hooks/useAutoPlay.ts"],"names":["useRef","useEffect","useStateContext","useInterval","callback","interval","savedCallback","current","tick","id","setInterval","clearInterval","autoPlayIntervalNew","pause","autoPlayInterval","dispatch","type","console","warn"],"mappings":";AAAA,SAASA,MAAT,EAAiBC,SAAjB,QAAkC,OAAlC;AACA,SAASC,eAAT,QAAgC,UAAhC;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,QAAD,EAAgBC,QAAhB,EAA2C;AAC7D,MAAMC,aAAa,GAAGN,MAAM,CAACI,QAAD,CAA5B;AAEAH,EAAAA,SAAS,CAAC,YAAM;AACdK,IAAAA,aAAa,CAACC,OAAd,GAAwBH,QAAxB;AACD,GAFQ,CAAT;AAIAH,EAAAA,SAAS,CAAC,YAAM;AACd,aAASO,IAAT,GAAgB;AACdF,MAAAA,aAAa,CAACC,OAAd;AACD;;AACD,QAAI,OAAOF,QAAP,KAAoB,QAAxB,EAAkC;AAChC,UAAII,EAAE,GAAGC,WAAW,CAACF,IAAD,EAAOH,QAAP,CAApB;AACA,aAAO;AAAA,eAAMM,aAAa,CAACF,EAAD,CAAnB;AAAA,OAAP;AACD;AACF,GARQ,EAQN,CAACJ,QAAD,CARM,CAAT;AASD,CAhBD;;AAkBA,gBAAe,UAACO,mBAAD,EAAuC;AAAA,yBACJV,eAAe,EADX;AAAA;AAAA;AAAA,MAC3CW,KAD2C,sBAC3CA,KAD2C;AAAA,MACpCC,gBADoC,sBACpCA,gBADoC;AAAA,MAChBC,QADgB;;AAGpDd,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI,OAAOW,mBAAP,KAA+B,QAAnC,EAA6C;AAC3CG,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAE,cAAR;AAAwBF,QAAAA,gBAAgB,EAAEF;AAA1C,OAAD,CAAR;AACD,KAFD,MAEO;AACLK,MAAAA,OAAO,CAACC,IAAR,sEAAsE,OAAON,mBAA7E;AACD;AACF,GANQ,EAMN,CAACA,mBAAD,CANM,CAAT;AAQAT,EAAAA,WAAW,CAAC,YAAM;AAChBY,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;AACD,GAFU,EAER,CAACH,KAAD,IAAUC,gBAFF,CAAX;AAGD,CAdD","sourcesContent":["import { useRef, useEffect } from 'react'\nimport { useStateContext } from '../state'\n\nconst useInterval = (callback: any, interval: number): void => {\n  const savedCallback = useRef(callback)\n\n  useEffect(() => {\n    savedCallback.current = callback\n  })\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current()\n    }\n    if (typeof interval === 'number') {\n      let id = setInterval(tick, interval)\n      return () => clearInterval(id)\n    }\n  }, [interval])\n}\n\nexport default (autoPlayIntervalNew: number): void => {\n  const [{ pause, autoPlayInterval }, dispatch] = useStateContext()\n\n  useEffect(() => {\n    if (typeof autoPlayIntervalNew === 'number') {\n      dispatch({ type: 'SET_AUTOPLAY', autoPlayInterval: autoPlayIntervalNew })\n    } else {\n      console.warn(`Sled-Error: \"autoplay\" must be of type \"number\", not \"${typeof autoPlayIntervalNew}\".`)\n    }\n  }, [autoPlayIntervalNew])\n\n  useInterval(() => {\n    dispatch({ type: 'NEXT' })\n  }, !pause && autoPlayInterval)\n}\n"]},"metadata":{},"sourceType":"module"}