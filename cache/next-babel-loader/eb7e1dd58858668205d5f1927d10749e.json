{"ast":null,"code":"import { useEffect, useRef } from 'react';\nimport { useStateContext } from '../state';\n\nconst useKeyboard = keyboard => {\n  const [{\n    hasFocus,\n    stopOnInteraction\n  }, dispatch] = useStateContext();\n  const hasFocusRef = useRef(false);\n  useEffect(() => {\n    hasFocusRef.current = hasFocus;\n  }, [hasFocus]);\n  useEffect(() => {\n    function onKeyup(event) {\n      if (!hasFocusRef.current) return;\n\n      if (stopOnInteraction) {\n        dispatch({\n          type: 'SET_AUTOPLAY',\n          autoPlayInterval: undefined\n        });\n      }\n\n      switch (event.keyCode) {\n        case 37:\n          dispatch({\n            type: 'PREV'\n          });\n          break;\n\n        case 39:\n          dispatch({\n            type: 'NEXT'\n          });\n          break;\n      }\n    }\n\n    if (keyboard) {\n      document.addEventListener('keyup', onKeyup);\n      return () => document.removeEventListener('keyup', onKeyup);\n    }\n  }, [keyboard, stopOnInteraction]);\n};\n\nexport default useKeyboard;","map":{"version":3,"sources":["/Users/andreasfaust/components/react-sled/sled/hooks/useKeyboard.ts"],"names":["useEffect","useRef","useStateContext","useKeyboard","keyboard","hasFocus","stopOnInteraction","dispatch","hasFocusRef","current","onKeyup","event","type","autoPlayInterval","undefined","keyCode","document","addEventListener","removeEventListener"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;AACA,SAASC,eAAT,QAAgC,UAAhC;;AAEA,MAAMC,WAAW,GAAIC,QAAD,IAAuB;AACzC,QAAM,CAAC;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAAD,EAAkCC,QAAlC,IAA8CL,eAAe,EAAnE;AACA,QAAMM,WAAW,GAAGP,MAAM,CAAU,KAAV,CAA1B;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,WAAW,CAACC,OAAZ,GAAsBJ,QAAtB;AACD,GAFQ,EAEN,CAACA,QAAD,CAFM,CAAT;AAIAL,EAAAA,SAAS,CAAC,MAAM;AACd,aAASU,OAAT,CAAiBC,KAAjB,EAAuC;AACrC,UAAI,CAACH,WAAW,CAACC,OAAjB,EAA0B;;AAE1B,UAAIH,iBAAJ,EAAuB;AACrBC,QAAAA,QAAQ,CAAC;AAAEK,UAAAA,IAAI,EAAE,cAAR;AAAwBC,UAAAA,gBAAgB,EAAEC;AAA1C,SAAD,CAAR;AACD;;AAED,cAAQH,KAAK,CAACI,OAAd;AACE,aAAK,EAAL;AACER,UAAAA,QAAQ,CAAC;AAAEK,YAAAA,IAAI,EAAE;AAAR,WAAD,CAAR;AACA;;AACF,aAAK,EAAL;AACEL,UAAAA,QAAQ,CAAC;AAAEK,YAAAA,IAAI,EAAE;AAAR,WAAD,CAAR;AACA;AANJ;AAQD;;AACD,QAAIR,QAAJ,EAAc;AACZY,MAAAA,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,EAAmCP,OAAnC;AACA,aAAO,MAAMM,QAAQ,CAACE,mBAAT,CAA6B,OAA7B,EAAsCR,OAAtC,CAAb;AACD;AACF,GArBQ,EAqBN,CAACN,QAAD,EAAWE,iBAAX,CArBM,CAAT;AAsBD,CA9BD;;AAgCA,eAAeH,WAAf","sourcesContent":["import { useEffect, useRef } from 'react'\nimport { useStateContext } from '../state'\n\nconst useKeyboard = (keyboard: boolean) => {\n  const [{ hasFocus, stopOnInteraction }, dispatch] = useStateContext()\n  const hasFocusRef = useRef<boolean>(false)\n\n  useEffect(() => {\n    hasFocusRef.current = hasFocus\n  }, [hasFocus])\n\n  useEffect(() => {\n    function onKeyup(event: KeyboardEvent) {\n      if (!hasFocusRef.current) return\n\n      if (stopOnInteraction) {\n        dispatch({ type: 'SET_AUTOPLAY', autoPlayInterval: undefined })\n      }\n\n      switch (event.keyCode) {\n        case 37:\n          dispatch({ type: 'PREV' })\n          break\n        case 39:\n          dispatch({ type: 'NEXT' })\n          break\n      }\n    }\n    if (keyboard) {\n      document.addEventListener('keyup', onKeyup)\n      return () => document.removeEventListener('keyup', onKeyup)\n    }\n  }, [keyboard, stopOnInteraction])\n}\n\nexport default useKeyboard\n"]},"metadata":{},"sourceType":"module"}