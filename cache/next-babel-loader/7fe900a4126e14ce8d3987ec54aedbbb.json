{"ast":null,"code":"import React from 'react';\nimport { debounce } from '../utils/debounce';\nimport { useStateContext } from '../state';\n\nfunction getProportion(width, height, offsetWidth, offsetHeight, proportion) {\n  let dimensionsForState = {};\n  let dimensionsForDom = {};\n  const [proportionWidth, proportionHeight] = proportion.split(':');\n\n  if (width) {\n    const heightValue = offsetWidth * +proportionHeight / +proportionWidth;\n    dimensionsForState = {\n      width: offsetWidth,\n      height: heightValue\n    };\n    dimensionsForDom = {\n      width,\n      height: heightValue\n    };\n  } else {\n    const widthValue = offsetHeight * +proportionWidth / +proportionHeight;\n    dimensionsForState = {\n      width: widthValue,\n      height: offsetHeight\n    };\n    dimensionsForDom = {\n      width: widthValue,\n      height\n    };\n  }\n\n  return [dimensionsForState, dimensionsForDom];\n}\n\nfunction getDimensions(width, height, proportion, ref, dispatch) {\n  const {\n    offsetWidth,\n    offsetHeight\n  } = ref.current;\n  let dimensionsForState = {\n    width: offsetWidth,\n    height: offsetHeight\n  };\n  let dimensionsForDom = {\n    width,\n    height\n  };\n  console.log(width, height);\n\n  if (!width && !height) {\n    const heightValue = offsetWidth / 2;\n    dimensionsForState = {\n      width: offsetWidth,\n      height: heightValue\n    };\n    dimensionsForDom = {\n      width: '100%',\n      height: heightValue\n    };\n    console.warn('Sled-Error: You need to provide either a width or a height. Falling back to \"width: 100%\" and proportion \"2:1\".');\n  }\n\n  if (proportion) {\n    getProportion(width, height, offsetWidth, offsetHeight, proportion);\n  }\n\n  dispatch({\n    type: 'SET_DIMENSIONS',\n    dimensions: dimensionsForState\n  });\n  return dimensionsForDom;\n}\n\nexport default ((width, height, ref) => {\n  const [{\n    proportion\n  }, dispatch] = useStateContext();\n  const [dimensions, setDimensions] = React.useState({\n    width: 0,\n    height: 0\n  });\n  React.useEffect(() => {\n    setDimensions(() => getDimensions(width, height, proportion, ref, dispatch));\n\n    function onResize() {\n      setDimensions(() => getDimensions(width, height, proportion, ref, dispatch));\n    }\n\n    const dOnResize = debounce(onResize, 200);\n    window.addEventListener('resize', dOnResize);\n    return () => window.removeEventListener('resize', dOnResize);\n  }, [width, height, proportion, ref.current]);\n  return dimensions;\n});","map":{"version":3,"sources":["/Users/andreasfaust/components/react-sled/sled/hooks/useDimensions.ts"],"names":["React","debounce","useStateContext","getProportion","width","height","offsetWidth","offsetHeight","proportion","dimensionsForState","dimensionsForDom","proportionWidth","proportionHeight","split","heightValue","widthValue","getDimensions","ref","dispatch","current","console","log","warn","type","dimensions","setDimensions","useState","useEffect","onResize","dOnResize","window","addEventListener","removeEventListener"],"mappings":"AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,mBAAzB;AACA,SAASC,eAAT,QAAgC,UAAhC;;AAQA,SAASC,aAAT,CAAuBC,KAAvB,EAA0CC,MAA1C,EAA8DC,WAA9D,EAAmFC,YAAnF,EAAyGC,UAAzG,EAA6H;AAC3H,MAAIC,kBAAkB,GAAG,EAAzB;AACA,MAAIC,gBAAgB,GAAG,EAAvB;AACA,QAAM,CAACC,eAAD,EAAkBC,gBAAlB,IAAsCJ,UAAU,CAACK,KAAX,CAAiB,GAAjB,CAA5C;;AACA,MAAIT,KAAJ,EAAW;AACT,UAAMU,WAAW,GAAIR,WAAW,GAAG,CAACM,gBAAhB,GAAoC,CAACD,eAAzD;AACAF,IAAAA,kBAAkB,GAAG;AACnBL,MAAAA,KAAK,EAAEE,WADY;AAEnBD,MAAAA,MAAM,EAAES;AAFW,KAArB;AAIAJ,IAAAA,gBAAgB,GAAG;AACjBN,MAAAA,KADiB;AAEjBC,MAAAA,MAAM,EAAES;AAFS,KAAnB;AAID,GAVD,MAUO;AACL,UAAMC,UAAU,GAAIR,YAAY,GAAG,CAACI,eAAjB,GAAoC,CAACC,gBAAxD;AACAH,IAAAA,kBAAkB,GAAG;AACnBL,MAAAA,KAAK,EAAEW,UADY;AAEnBV,MAAAA,MAAM,EAAEE;AAFW,KAArB;AAIAG,IAAAA,gBAAgB,GAAG;AACjBN,MAAAA,KAAK,EAAEW,UADU;AAEjBV,MAAAA;AAFiB,KAAnB;AAID;;AACD,SAAO,CAACI,kBAAD,EAAqBC,gBAArB,CAAP;AACD;;AAED,SAASM,aAAT,CAAuBZ,KAAvB,EAA0CC,MAA1C,EAA8DG,UAA9D,EAAkFS,GAAlF,EAA6FC,QAA7F,EAAoH;AAClH,QAAM;AAAEZ,IAAAA,WAAF;AAAeC,IAAAA;AAAf,MAAgCU,GAAG,CAACE,OAA1C;AACA,MAAIV,kBAA+B,GAAG;AAAEL,IAAAA,KAAK,EAAEE,WAAT;AAAsBD,IAAAA,MAAM,EAAEE;AAA9B,GAAtC;AACA,MAAIG,gBAA6B,GAAG;AAAEN,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAApC;AAEAe,EAAAA,OAAO,CAACC,GAAR,CAAYjB,KAAZ,EAAmBC,MAAnB;;AACA,MAAI,CAACD,KAAD,IAAU,CAACC,MAAf,EAAuB;AACrB,UAAMS,WAAW,GAAGR,WAAW,GAAG,CAAlC;AACAG,IAAAA,kBAAkB,GAAG;AAAEL,MAAAA,KAAK,EAAEE,WAAT;AAAsBD,MAAAA,MAAM,EAAES;AAA9B,KAArB;AACAJ,IAAAA,gBAAgB,GAAG;AAAEN,MAAAA,KAAK,EAAE,MAAT;AAAiBC,MAAAA,MAAM,EAAES;AAAzB,KAAnB;AACAM,IAAAA,OAAO,CAACE,IAAR,CAAa,iHAAb;AACD;;AAED,MAAId,UAAJ,EAAgB;AACdL,IAAAA,aAAa,CAACC,KAAD,EAAQC,MAAR,EAAgBC,WAAhB,EAA6BC,YAA7B,EAA2CC,UAA3C,CAAb;AACD;;AAEDU,EAAAA,QAAQ,CAAC;AACPK,IAAAA,IAAI,EAAE,gBADC;AAEPC,IAAAA,UAAU,EAAEf;AAFL,GAAD,CAAR;AAKA,SAAOC,gBAAP;AACD;;AAED,gBAAe,CAACN,KAAD,EAAoBC,MAApB,EAAwCY,GAAxC,KAAmE;AAChF,QAAM,CAAC;AAAET,IAAAA;AAAF,GAAD,EAAiBU,QAAjB,IAA6BhB,eAAe,EAAlD;AAEA,QAAM,CAACsB,UAAD,EAAaC,aAAb,IAA8BzB,KAAK,CAAC0B,QAAN,CAA4B;AAAEtB,IAAAA,KAAK,EAAE,CAAT;AAAYC,IAAAA,MAAM,EAAE;AAApB,GAA5B,CAApC;AAEAL,EAAAA,KAAK,CAAC2B,SAAN,CAAgB,MAAM;AACpBF,IAAAA,aAAa,CAAC,MAAMT,aAAa,CAACZ,KAAD,EAAQC,MAAR,EAAgBG,UAAhB,EAA4BS,GAA5B,EAAiCC,QAAjC,CAApB,CAAb;;AACA,aAASU,QAAT,GAAoB;AAClBH,MAAAA,aAAa,CAAC,MAAMT,aAAa,CAACZ,KAAD,EAAQC,MAAR,EAAgBG,UAAhB,EAA4BS,GAA5B,EAAiCC,QAAjC,CAApB,CAAb;AACD;;AACD,UAAMW,SAAS,GAAG5B,QAAQ,CAAC2B,QAAD,EAAW,GAAX,CAA1B;AACAE,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCF,SAAlC;AACA,WAAO,MAAMC,MAAM,CAACE,mBAAP,CAA2B,QAA3B,EAAqCH,SAArC,CAAb;AACD,GARD,EAQG,CAACzB,KAAD,EAAQC,MAAR,EAAgBG,UAAhB,EAA4BS,GAAG,CAACE,OAAhC,CARH;AAUA,SAAOK,UAAP;AACD,CAhBD","sourcesContent":["\nimport React from 'react'\nimport { debounce } from '../utils/debounce'\nimport { useStateContext } from '../state'\nimport { TRef, TDimension } from '../state/types-defaults'\n\ninterface IDimensions {\n  width: TDimension\n  height: TDimension\n}\n\nfunction getProportion(width: TDimension, height: TDimension, offsetWidth: number, offsetHeight: number, proportion: string) {\n  let dimensionsForState = {}\n  let dimensionsForDom = {}\n  const [proportionWidth, proportionHeight] = proportion.split(':')\n  if (width) {\n    const heightValue = (offsetWidth * +proportionHeight) / +proportionWidth\n    dimensionsForState = {\n      width: offsetWidth,\n      height: heightValue\n    }\n    dimensionsForDom = {\n      width,\n      height: heightValue\n    }\n  } else {\n    const widthValue = (offsetHeight * +proportionWidth) / +proportionHeight\n    dimensionsForState = {\n      width: widthValue,\n      height: offsetHeight\n    }\n    dimensionsForDom = {\n      width: widthValue,\n      height\n    }\n  }\n  return [dimensionsForState, dimensionsForDom]\n}\n\nfunction getDimensions(width: TDimension, height: TDimension, proportion: string, ref: TRef, dispatch): IDimensions {\n  const { offsetWidth, offsetHeight } = ref.current\n  let dimensionsForState: IDimensions = { width: offsetWidth, height: offsetHeight }\n  let dimensionsForDom: IDimensions = { width, height }\n\n  console.log(width, height)\n  if (!width && !height) {\n    const heightValue = offsetWidth / 2\n    dimensionsForState = { width: offsetWidth, height: heightValue }\n    dimensionsForDom = { width: '100%', height: heightValue }\n    console.warn('Sled-Error: You need to provide either a width or a height. Falling back to \"width: 100%\" and proportion \"2:1\".')\n  }\n\n  if (proportion) {\n    getProportion(width, height, offsetWidth, offsetHeight, proportion)\n  }\n\n  dispatch({\n    type: 'SET_DIMENSIONS',\n    dimensions: dimensionsForState\n  })\n\n  return dimensionsForDom\n}\n\nexport default (width: TDimension, height: TDimension, ref: TRef): IDimensions => {\n  const [{ proportion }, dispatch] = useStateContext()\n\n  const [dimensions, setDimensions] = React.useState<IDimensions>({ width: 0, height: 0 })\n\n  React.useEffect(() => {\n    setDimensions(() => getDimensions(width, height, proportion, ref, dispatch))\n    function onResize() {\n      setDimensions(() => getDimensions(width, height, proportion, ref, dispatch))\n    }\n    const dOnResize = debounce(onResize, 200)\n    window.addEventListener('resize', dOnResize)\n    return () => window.removeEventListener('resize', dOnResize)\n  }, [width, height, proportion, ref.current])\n\n  return dimensions\n}\n"]},"metadata":{},"sourceType":"module"}