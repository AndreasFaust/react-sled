{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { debounce } from '../utils/debounce';\nimport { useStateContext } from '../state';\n\nfunction getProportion(_ref) {\n  var width = _ref.width,\n      height = _ref.height,\n      offsetWidth = _ref.offsetWidth,\n      offsetHeight = _ref.offsetHeight,\n      proportion = _ref.proportion,\n      dispatch = _ref.dispatch;\n  if (!proportion) return;\n\n  var _proportion$split = proportion.split(':'),\n      _proportion$split2 = _slicedToArray(_proportion$split, 2),\n      proportionWidth = _proportion$split2[0],\n      proportionHeight = _proportion$split2[1];\n\n  var dimensions = {\n    width: 0,\n    height: 0\n  };\n\n  if (width) {\n    var heightValue = offsetWidth * +proportionHeight / +proportionWidth;\n    dimensions = {\n      width: offsetWidth,\n      height: heightValue\n    };\n  } else {\n    var widthValue = offsetHeight * +proportionWidth / +proportionHeight;\n    dimensions = {\n      width: widthValue,\n      height: offsetHeight\n    };\n  }\n\n  dispatch({\n    type: 'SET_DIMENSIONS',\n    dimensions: dimensions\n  });\n}\n\nexport default (function (ref) {\n  var _useStateContext = useStateContext(),\n      _useStateContext2 = _slicedToArray(_useStateContext, 2),\n      _useStateContext2$ = _useStateContext2[0],\n      dimensionsDOM = _useStateContext2$.dimensionsDOM,\n      proportion = _useStateContext2$.proportion,\n      dispatch = _useStateContext2[1];\n\n  React.useEffect(function () {\n    function onResize() {\n      var _ref$current = ref.current,\n          offsetWidth = _ref$current.offsetWidth,\n          offsetHeight = _ref$current.offsetHeight;\n      getProportion(_objectSpread({}, dimensionsDOM, {\n        offsetWidth: offsetWidth,\n        offsetHeight: offsetHeight,\n        proportion: proportion,\n        dispatch: dispatch\n      }));\n    }\n\n    onResize();\n    var dOnResize = debounce(onResize, 200);\n    window.addEventListener('resize', dOnResize);\n    return function () {\n      return window.removeEventListener('resize', dOnResize);\n    };\n  }, [dimensionsDOM, proportion]);\n});","map":null,"metadata":{},"sourceType":"module"}