{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState, useRef } from 'react';\nimport Toggle from 'react-toggle';\nimport debounce from 'lodash/debounce';\nimport Slider from 'rc-slider';\nimport 'rc-slider/assets/index.css';\nimport { slide as Menu } from 'react-burger-menu';\nimport { useStateValue } from './state';\nimport useWindowSize from './useWindowSize';\nimport Select from 'react-select';\nconst customStyles = {\n  container: () => ({\n    width: 150,\n    position: 'relative'\n  }),\n  placeholder: () => ({\n    fontSize: '0.9rem'\n  }),\n  option: provided => _objectSpread({}, provided, {\n    fontSize: '0.9rem'\n  })\n};\n\nconst useDebounce = defaultValue => {\n  const {\n    0: value,\n    1: setValue\n  } = useState(defaultValue);\n  const dSetValue = useRef(event => {\n    event.persist();\n    debounce(() => setValue(event.target.value), 150)();\n  });\n  return [value, dSetValue];\n};\n\nconst Wrapper = ({\n  children\n}) => {\n  const {\n    width\n  } = useWindowSize();\n  return width > 1024 ? __jsx(\"div\", {\n    className: \"settings\"\n  }, children) : __jsx(Menu, {\n    className: \"settings\"\n  }, children);\n};\n\nconst Settings = () => {\n  const [state, dispatch] = useStateValue();\n  const [proportion, setProportion] = React.useState(state.proportion);\n  const [direction, setDirection] = React.useState(state.direction);\n  const [width, setWidth] = useDebounce(state.width);\n  const [height, setHeight] = useDebounce(state.height);\n  const [autoPlayInterval, setAutoPlayInterval] = useDebounce(state.autoPlayInterval);\n  const [select, setSelect] = useDebounce(state.select);\n  useEffect(() => {\n    dispatch({\n      type: 'width',\n      value: width\n    });\n    dispatch({\n      type: 'height',\n      value: height\n    });\n    dispatch({\n      type: 'direction',\n      value: direction\n    });\n    dispatch({\n      type: 'autoPlayInterval',\n      value: +autoPlayInterval\n    });\n    dispatch({\n      type: 'proportion',\n      value: proportion\n    });\n  }, [width, height, direction, autoPlayInterval, proportion]);\n  useEffect(() => {\n    if (_parseInt(select, 10)) {\n      dispatch({\n        type: 'select',\n        value: _parseInt(select, 10)\n      });\n    }\n\n    if (select === 'prev' || select === 'next') {\n      dispatch({\n        type: 'select',\n        value: select\n      });\n    }\n  }, [select]);\n  return __jsx(Wrapper, null, __jsx(\"h2\", {\n    className: \"settings__h2 bold\",\n    tabIndex: \"0\"\n  }, \"Settings:\"), __jsx(\"div\", {\n    className: \"settings__column\"\n  }, __jsx(\"label\", {\n    className: \"settings__label\"\n  }, __jsx(\"h3\", {\n    className: \"settings__h3\"\n  }, \"width\"), __jsx(\"input\", {\n    type: \"text\",\n    size: 7,\n    className: \"settings__input\",\n    defaultValue: state.width,\n    onChange: event => setWidth.current(event)\n  })), __jsx(\"label\", {\n    className: \"settings__label\"\n  }, __jsx(\"h3\", {\n    className: \"settings__h3\"\n  }, \"height\"), __jsx(\"input\", {\n    type: \"text\",\n    size: 7,\n    className: \"settings__input\",\n    defaultValue: state.height,\n    placeholder: \"auto\",\n    onChange: event => setHeight.current(event)\n  })), __jsx(\"label\", {\n    className: `settings__label`\n  }, __jsx(\"h3\", {\n    className: \"settings__h3\"\n  }, \"proportion\"), __jsx(Select, {\n    className: \"settings__select\",\n    placeholder: \"2:1\",\n    onChange: option => setProportion(option.value),\n    options: [{\n      value: '1:1',\n      label: '1:1'\n    }, {\n      value: '1:2',\n      label: '1:2'\n    }, {\n      value: '2:1',\n      label: '2:1'\n    }, {\n      value: '3:1',\n      label: '3:1'\n    }, {\n      value: '3:2',\n      label: '3:2'\n    }],\n    styles: customStyles\n  })), __jsx(\"label\", {\n    className: \"settings__label settings__label--select\"\n  }, __jsx(\"h3\", {\n    className: \"settings__h3\"\n  }, \"direction\"), __jsx(Select, {\n    className: \"settings__select\",\n    placeholder: \"horizontal\",\n    onChange: option => setDirection(option.value),\n    options: [{\n      value: 'horizontal',\n      label: 'horizontal'\n    }, {\n      value: 'vertical',\n      label: 'vertical'\n    }],\n    styles: customStyles\n  })), __jsx(\"label\", {\n    className: \"settings__label\"\n  }, __jsx(\"h3\", {\n    className: \"settings__h3\"\n  }, \"select\"), __jsx(\"input\", {\n    type: \"text\",\n    size: 7,\n    className: \"settings__input\",\n    placeholder: state.select,\n    onChange: event => setSelect.current(event)\n  })), __jsx(\"label\", {\n    className: \"settings__label\"\n  }, __jsx(\"h3\", {\n    className: \"settings__h3\"\n  }, \"showElements\"), __jsx(\"input\", {\n    type: \"number\",\n    size: 1,\n    className: \"settings__input\",\n    value: state.showElements,\n    onChange: event => dispatch({\n      type: 'showElements',\n      value: event.target.value\n    })\n  })), __jsx(\"label\", {\n    className: \"settings__label\"\n  }, __jsx(\"h3\", {\n    className: \"settings__h3\"\n  }, \"slideBy\"), __jsx(\"input\", {\n    type: \"number\",\n    size: 1,\n    className: \"settings__input\",\n    value: state.slideBy,\n    onChange: event => dispatch({\n      type: 'slideBy',\n      value: event.target.value\n    })\n  })), __jsx(\"label\", {\n    className: \"settings__label\"\n  }, __jsx(\"h3\", {\n    className: \"settings__h3\"\n  }, \"autoPlayInterval\"), __jsx(\"input\", {\n    type: \"number\",\n    size: 5,\n    className: \"settings__input\",\n    defaultValue: state.autoPlayInterval,\n    onChange: event => setAutoPlayInterval.current(event)\n  })), __jsx(\"label\", {\n    className: \"settings__label\"\n  }, __jsx(\"h3\", {\n    className: \"settings__h3\"\n  }, \"dragDistance\"), __jsx(\"input\", {\n    type: \"text\",\n    size: 7,\n    className: \"settings__input\",\n    defaultValue: state.dragDistance,\n    onChange: event => dispatch({\n      type: 'dragDistance',\n      value: event.target.value\n    })\n  }))), __jsx(\"div\", {\n    className: \"settings__column settings__column--2\"\n  }, __jsx(\"label\", {\n    className: \"settings__label\"\n  }, __jsx(\"h3\", {\n    className: \"settings__h3\"\n  }, \"rewind\"), __jsx(Toggle, {\n    defaultChecked: state.rewind,\n    icons: false,\n    onChange: () => dispatch({\n      type: 'rewind',\n      value: !state.rewind\n    })\n  })), __jsx(\"label\", {\n    className: \"settings__label\"\n  }, __jsx(\"h3\", {\n    className: \"settings__h3\"\n  }, \"pauseOnMouseOver\"), __jsx(Toggle, {\n    defaultChecked: state.pauseOnMouseOver,\n    icons: false,\n    onChange: () => dispatch({\n      type: 'pauseOnMouseOver',\n      value: !state.pauseOnMouseOver\n    })\n  })), __jsx(\"label\", {\n    className: \"settings__label\"\n  }, __jsx(\"h3\", {\n    className: \"settings__h3\"\n  }, \"stopOnInteraction\"), __jsx(Toggle, {\n    defaultChecked: state.stopOnInteraction,\n    icons: false,\n    onChange: () => dispatch({\n      type: 'stopOnInteraction',\n      value: !state.stopOnInteraction\n    })\n  })), __jsx(\"label\", {\n    className: \"settings__label\"\n  }, __jsx(\"h3\", {\n    className: \"settings__h3\"\n  }, \"keyboard\"), __jsx(Toggle, {\n    defaultChecked: state.keyboard,\n    icons: false,\n    onChange: () => dispatch({\n      type: 'keyboard',\n      value: !state.keyboard\n    })\n  })), __jsx(\"label\", {\n    className: \"settings__label\"\n  }, __jsx(\"h3\", {\n    className: \"settings__h3\"\n  }, \"dragging\"), __jsx(Toggle, {\n    defaultChecked: state.dragging,\n    icons: false,\n    onChange: () => dispatch({\n      type: 'dragging',\n      value: !state.dragging\n    })\n  }))), __jsx(\"div\", {\n    className: \"settings__column settings__column--3\"\n  }, __jsx(\"label\", {\n    className: \"settings__label background\"\n  }, __jsx(\"h3\", {\n    className: \"settings__h3 bold\"\n  }, \"config\")), __jsx(\"label\", {\n    className: \"settings__label settings__label--config\"\n  }, __jsx(\"h3\", {\n    className: \"settings__h3\"\n  }, \"mass: \", state.mass), __jsx(Slider, {\n    min: 1,\n    max: 500,\n    defaultValue: 1,\n    onChange: value => dispatch({\n      type: 'mass',\n      value\n    })\n  })), __jsx(\"label\", {\n    className: \"settings__label settings__label--config\"\n  }, __jsx(\"h3\", {\n    className: \"settings__h3\"\n  }, \"tension: \", state.tension), __jsx(Slider, {\n    min: 1,\n    max: 500,\n    defaultValue: 210,\n    onChange: value => dispatch({\n      type: 'tension',\n      value\n    })\n  })), __jsx(\"label\", {\n    className: \"settings__label settings__label--config\"\n  }, __jsx(\"h3\", {\n    className: \"settings__h3\"\n  }, \"friction: \", state.friction), __jsx(Slider, {\n    min: 1,\n    max: 500,\n    defaultValue: 20,\n    onChange: value => dispatch({\n      type: 'friction',\n      value\n    })\n  })), __jsx(\"label\", {\n    className: \"settings__label settings__label--config\"\n  }, __jsx(\"h3\", {\n    className: \"settings__h3\"\n  }, \"clamp\"), __jsx(Toggle, {\n    defaultChecked: state.clamp,\n    icons: false,\n    onChange: () => dispatch({\n      type: 'clamp',\n      value: !state.clamp\n    })\n  }))));\n};\n\nexport default Settings;","map":null,"metadata":{},"sourceType":"module"}