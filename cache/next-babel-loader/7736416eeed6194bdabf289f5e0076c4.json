{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _objectDestructuringEmpty from \"@babel/runtime-corejs2/helpers/esm/objectDestructuringEmpty\";\nimport React from 'react';\nimport { debounce } from '../utils/debounce';\nimport { useStateContext } from '../state';\n\nfunction getProportion(_ref) {\n  _objectDestructuringEmpty(_ref);\n\n  var _proportion$split = proportion.split(':'),\n      _proportion$split2 = _slicedToArray(_proportion$split, 2),\n      proportionWidth = _proportion$split2[0],\n      proportionHeight = _proportion$split2[1];\n\n  var dimensions = {\n    width: 0,\n    height: 0\n  };\n\n  if (width) {\n    var heightValue = offsetWidth * +proportionHeight / +proportionWidth;\n    dimensions = {\n      width: width,\n      height: heightValue\n    };\n  } else {\n    var widthValue = offsetHeight * +proportionWidth / +proportionHeight;\n    dimensions = {\n      width: widthValue,\n      height: height\n    };\n  }\n\n  dispatch({\n    type: 'SET_DIMENSIONS_DOM',\n    dimensions: dimensions\n  });\n}\n\nfunction getDimensions(width, height, proportion, ref, dispatch) {\n  var _ref$current = ref.current,\n      offsetWidth = _ref$current.offsetWidth,\n      offsetHeight = _ref$current.offsetHeight;\n\n  if (!width && !height) {\n    var heightValue = offsetWidth / 2;\n    console.warn('Sled-Error: You need to provide either a width or a height. Falling back to \"width: 100%\" and proportion \"2:1\".');\n    dispatch({\n      type: 'SET_DIMENSIONS_DOM',\n      dimensionsDOM: {\n        width: '100%',\n        height: heightValue\n      }\n    });\n    return;\n  }\n\n  if (width && height) {\n    dispatch({\n      type: 'SET_DIMENSIONS_DOM',\n      dimensionsDOM: {\n        width: width,\n        height: height\n      }\n    });\n    return;\n  }\n\n  getProportion(width, height, offsetWidth, offsetHeight, proportion, dispatch);\n}\n\nexport default (function (width, height, ref) {\n  var _useStateContext = useStateContext(),\n      _useStateContext2 = _slicedToArray(_useStateContext, 2),\n      _useStateContext2$ = _useStateContext2[0],\n      dimensionsDOM = _useStateContext2$.dimensionsDOM,\n      proportion = _useStateContext2$.proportion,\n      dispatch = _useStateContext2[1];\n\n  var _ref$current2 = ref.current,\n      offsetWidth = _ref$current2.offsetWidth,\n      offsetHeight = _ref$current2.offsetHeight;\n  React.useEffect(function () {\n    getDimensions(width, height, proportion, ref, dispatch);\n\n    function onResize() {\n      getDimensions(width, height, proportion, ref, dispatch);\n    }\n\n    var dOnResize = debounce(onResize, 200);\n    window.addEventListener('resize', dOnResize);\n    return function () {\n      return window.removeEventListener('resize', dOnResize);\n    };\n  }, [width, height, proportion, ref.current]);\n  React.useEffect(function () {\n    dispatch({\n      type: 'SET_DIMENSIONS',\n      dimensions: {\n        width: offsetWidth,\n        height: offsetHeight\n      }\n    });\n  }, [dimensionsDOM.width, dimensionsDOM.height]);\n});","map":{"version":3,"sources":["/Users/andreasfaust/components/react-sled/sled/hooks/useDimensions.ts"],"names":["React","debounce","useStateContext","getProportion","proportion","split","proportionWidth","proportionHeight","dimensions","width","height","heightValue","offsetWidth","widthValue","offsetHeight","dispatch","type","getDimensions","ref","current","console","warn","dimensionsDOM","useEffect","onResize","dOnResize","window","addEventListener","removeEventListener"],"mappings":"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","sourcesContent":["\nimport React from 'react'\nimport { debounce } from '../utils/debounce'\nimport { useStateContext } from '../state'\nimport { TRef, TDimension } from '../state/types-defaults'\n\ninterface IProportion {\n  width: TDimension, height: TDimension, offsetWidth: number, offsetHeight: number, proportion: string, dispatch\n}\n\nfunction getProportion<IProportion>({ }) {\n  const [proportionWidth, proportionHeight] = proportion.split(':')\n  let dimensions: IDimensions = { width: 0, height: 0 }\n\n  if (width) {\n    const heightValue = (offsetWidth * +proportionHeight) / +proportionWidth\n    dimensions = {\n      width,\n      height: heightValue\n    }\n  } else {\n    const widthValue = (offsetHeight * +proportionWidth) / +proportionHeight\n    dimensions = {\n      width: widthValue,\n      height\n    }\n  }\n\n  dispatch({\n    type: 'SET_DIMENSIONS_DOM',\n    dimensions\n  })\n}\n\nfunction getDimensions(width: TDimension, height: TDimension, proportion: string, ref: TRef, dispatch) {\n  const { offsetWidth, offsetHeight } = ref.current\n\n  if (!width && !height) {\n    const heightValue = offsetWidth / 2\n    console.warn('Sled-Error: You need to provide either a width or a height. Falling back to \"width: 100%\" and proportion \"2:1\".')\n    dispatch({\n      type: 'SET_DIMENSIONS_DOM',\n      dimensionsDOM: { width: '100%', height: heightValue }\n    })\n    return\n  }\n\n  if (width && height) {\n    dispatch({\n      type: 'SET_DIMENSIONS_DOM',\n      dimensionsDOM: { width, height }\n    })\n    return\n  }\n\n  getProportion(width, height, offsetWidth, offsetHeight, proportion, dispatch)\n}\n\nexport default (width: TDimension, height: TDimension, ref: TRef) => {\n  const [{ dimensionsDOM, proportion }, dispatch] = useStateContext()\n  const { offsetWidth, offsetHeight } = ref.current\n\n  React.useEffect(() => {\n    getDimensions(width, height, proportion, ref, dispatch)\n    function onResize() {\n      getDimensions(width, height, proportion, ref, dispatch)\n    }\n    const dOnResize = debounce(onResize, 200)\n    window.addEventListener('resize', dOnResize)\n    return () => window.removeEventListener('resize', dOnResize)\n  }, [width, height, proportion, ref.current])\n\n  React.useEffect(() => {\n    dispatch({\n      type: 'SET_DIMENSIONS',\n      dimensions: { width: offsetWidth, height: offsetHeight }\n    })\n  }, [dimensionsDOM.width, dimensionsDOM.height])\n\n}\n"]},"metadata":{},"sourceType":"module"}