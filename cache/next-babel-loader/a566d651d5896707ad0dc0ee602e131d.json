{"ast":null,"code":"import React from 'react';\nimport { debounce } from '../utils/debounce';\nimport { useStateContext } from '../state';\n\nfunction getProportion({\n  width,\n  height,\n  offsetWidth,\n  offsetHeight,\n  proportion,\n  dispatch\n}) {\n  console.log(proportion);\n  if (!proportion) return;\n  const [proportionWidth, proportionHeight] = proportion.split(':');\n  let dimensions = {\n    width: 0,\n    height: 0\n  };\n\n  if (width) {\n    const heightValue = offsetWidth * +proportionHeight / +proportionWidth;\n    dimensions = {\n      width,\n      height: heightValue\n    };\n  } else {\n    const widthValue = offsetHeight * +proportionWidth / +proportionHeight;\n    dimensions = {\n      width: widthValue,\n      height\n    };\n  }\n\n  dispatch({\n    type: 'SET_DIMENSIONS_DOM',\n    dimensions\n  });\n}\n\nfunction getDimensions(width, height, proportion, ref, dispatch) {\n  const {\n    offsetWidth,\n    offsetHeight\n  } = ref.current; // if (!width && !height) {\n  //   const heightValue = offsetWidth / 2\n  //   // console.warn('Sled-Error: You need to provide either a width or a height. Falling back to \"width: 100%\" and proportion \"2:1\".')\n  //   dispatch({\n  //     type: 'SET_DIMENSIONS_DOM',\n  //     dimensionsDOM: { width: '100%', height: heightValue }\n  //   })\n  //   return\n  // }\n\n  if (width && height) {\n    dispatch({\n      type: 'SET_DIMENSIONS_DOM',\n      dimensionsDOM: {\n        width,\n        height\n      }\n    });\n    return;\n  }\n\n  getProportion({\n    width,\n    height,\n    offsetWidth,\n    offsetHeight,\n    proportion,\n    dispatch\n  });\n}\n\nexport default ((width, height, ref) => {\n  const [{\n    dimensionsDOM,\n    proportion\n  }, dispatch] = useStateContext();\n  React.useEffect(() => {\n    getDimensions(width, height, proportion, ref, dispatch);\n\n    function onResize() {\n      getDimensions(width, height, proportion, ref, dispatch);\n    }\n\n    const dOnResize = debounce(onResize, 200);\n    window.addEventListener('resize', dOnResize);\n    return () => window.removeEventListener('resize', dOnResize);\n  }, [width, height, proportion, ref.current]);\n  React.useEffect(() => {\n    const {\n      offsetWidth,\n      offsetHeight\n    } = ref.current;\n    dispatch({\n      type: 'SET_DIMENSIONS',\n      dimensions: {\n        width: offsetWidth,\n        height: offsetHeight\n      }\n    });\n  }, [dimensionsDOM]);\n});","map":{"version":3,"sources":["/Users/andreasfaust/components/react-sled/sled/hooks/useDimensions.ts"],"names":["React","debounce","useStateContext","getProportion","width","height","offsetWidth","offsetHeight","proportion","dispatch","console","log","proportionWidth","proportionHeight","split","dimensions","heightValue","widthValue","type","getDimensions","ref","current","dimensionsDOM","useEffect","onResize","dOnResize","window","addEventListener","removeEventListener"],"mappings":"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","sourcesContent":["\nimport React from 'react'\nimport { debounce } from '../utils/debounce'\nimport { useStateContext } from '../state'\nimport { TRef, TDimension } from '../state/types-defaults'\n\ninterface IProportion {\n  width: TDimension\n  height: TDimension\n  offsetWidth: number\n  offsetHeight: number\n  proportion: string\n  dispatch\n}\n\ninterface IDimensions {\n  width: TDimension\n  height: TDimension\n}\n\nfunction getProportion({\n  width,\n  height,\n  offsetWidth,\n  offsetHeight,\n  proportion,\n  dispatch\n}: IProportion) {\n  console.log(proportion)\n  if (!proportion) return\n\n  const [proportionWidth, proportionHeight] = proportion.split(':')\n  let dimensions: IDimensions = { width: 0, height: 0 }\n\n  if (width) {\n    const heightValue = (offsetWidth * +proportionHeight) / +proportionWidth\n    dimensions = {\n      width,\n      height: heightValue\n    }\n  } else {\n    const widthValue = (offsetHeight * +proportionWidth) / +proportionHeight\n    dimensions = {\n      width: widthValue,\n      height\n    }\n  }\n\n  dispatch({\n    type: 'SET_DIMENSIONS_DOM',\n    dimensions\n  })\n}\n\nfunction getDimensions(width: TDimension, height: TDimension, proportion: string, ref: TRef, dispatch) {\n  const { offsetWidth, offsetHeight } = ref.current\n\n  // if (!width && !height) {\n  //   const heightValue = offsetWidth / 2\n  //   // console.warn('Sled-Error: You need to provide either a width or a height. Falling back to \"width: 100%\" and proportion \"2:1\".')\n  //   dispatch({\n  //     type: 'SET_DIMENSIONS_DOM',\n  //     dimensionsDOM: { width: '100%', height: heightValue }\n  //   })\n  //   return\n  // }\n\n  if (width && height) {\n    dispatch({\n      type: 'SET_DIMENSIONS_DOM',\n      dimensionsDOM: { width, height }\n    })\n    return\n  }\n\n  getProportion({ width, height, offsetWidth, offsetHeight, proportion, dispatch })\n}\n\nexport default (width: TDimension, height: TDimension, ref: TRef) => {\n  const [{ dimensionsDOM, proportion }, dispatch] = useStateContext()\n\n  React.useEffect(() => {\n    getDimensions(width, height, proportion, ref, dispatch)\n    function onResize() {\n      getDimensions(width, height, proportion, ref, dispatch)\n    }\n    const dOnResize = debounce(onResize, 200)\n    window.addEventListener('resize', dOnResize)\n    return () => window.removeEventListener('resize', dOnResize)\n  }, [width, height, proportion, ref.current])\n\n  React.useEffect(() => {\n    const { offsetWidth, offsetHeight } = ref.current\n    dispatch({\n      type: 'SET_DIMENSIONS',\n      dimensions: { width: offsetWidth, height: offsetHeight }\n    })\n  }, [dimensionsDOM])\n\n}\n"]},"metadata":{},"sourceType":"module"}