{"ast":null,"code":"var _jsxFileName = \"/Users/andreasfaust/components/react-sled/sled/progress/track.tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport { useSpring, animated } from 'react-spring';\nimport { useStateContext } from '../state';\n\nfunction getX(slideSteps, currentIndex, goPrevNext = 0) {\n  return 100 - 100 / slideSteps * (currentIndex + goPrevNext);\n}\n\nconst SledProgressTrack = ({\n  className\n}) => {\n  const [{\n    currentIndex,\n    prevIndex,\n    slideSteps,\n    autoPlayInterval,\n    pause,\n    pauseOnMouseOver,\n    config\n  }] = useStateContext();\n  const [props, set] = useSpring(() => ({\n    from: {\n      x: 100\n    }\n  }));\n  useEffect(() => {\n    if (pauseOnMouseOver) {\n      set({\n        config,\n        x: getX(slideSteps, currentIndex),\n        reset: false\n      });\n    }\n  }, [pauseOnMouseOver]);\n  useEffect(() => {\n    if (!slideSteps) return;\n    const xCalc = getX(slideSteps, currentIndex, !autoPlayInterval && 1);\n\n    if (currentIndex === 0) {\n      set({\n        config,\n        from: {\n          x: 100\n        },\n        x: xCalc,\n        reset: slideSteps > 2 ? prevIndex !== 1 : true\n      });\n    } else {\n      set({\n        config,\n        x: xCalc,\n        reset: false\n      });\n    }\n  }, [slideSteps, currentIndex, autoPlayInterval]);\n  useEffect(() => {\n    if (!autoPlayInterval) return;\n    set({\n      config: autoPlayInterval && !pause ? {\n        duration: autoPlayInterval\n      } : config,\n      from: {\n        x: getX(slideSteps, currentIndex)\n      },\n      x: getX(slideSteps, currentIndex, !pause && 1),\n      reset: true\n    });\n  }, [pause, autoPlayInterval, slideSteps, currentIndex]);\n  return __jsx(animated.div, {\n    className: `sled-progress-${className}-track`,\n    style: {\n      position: 'absolute',\n      left: 0,\n      width: '100%',\n      pointerEvents: 'none',\n      transform: props.x.to(x => `translateX(-${x}%)`)\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  });\n};\n\nexport default SledProgressTrack;","map":{"version":3,"sources":["/Users/andreasfaust/components/react-sled/sled/progress/track.tsx"],"names":["React","useEffect","useSpring","animated","useStateContext","getX","slideSteps","currentIndex","goPrevNext","SledProgressTrack","className","prevIndex","autoPlayInterval","pause","pauseOnMouseOver","config","props","set","from","x","reset","xCalc","duration","position","left","width","pointerEvents","transform","to"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react'\nimport { useSpring, animated } from 'react-spring'\n\nimport { useStateContext } from '../state'\n\nfunction getX(slideSteps: number, currentIndex: number, goPrevNext: number = 0): number {\n  return 100 - ((100 / slideSteps) * (currentIndex + goPrevNext))\n}\n\ninterface IProps {\n  className: string\n}\n\nconst SledProgressTrack: React.FC<IProps> = ({ className }) => {\n  const [{\n    currentIndex,\n    prevIndex,\n    slideSteps,\n    autoPlayInterval,\n    pause,\n    pauseOnMouseOver,\n    config\n  }] = useStateContext()\n\n  const [props, set] = useSpring(() => ({\n    from: { x: 100 }\n  }))\n\n  useEffect(() => {\n    if (pauseOnMouseOver) {\n      set({\n        config,\n        x: getX(slideSteps, currentIndex),\n        reset: false\n      })\n    }\n  }, [pauseOnMouseOver])\n\n  useEffect(() => {\n    if (!slideSteps) return\n    const xCalc = getX(slideSteps, currentIndex, !autoPlayInterval && 1)\n    if (currentIndex === 0) {\n      set({\n        config,\n        from: { x: 100 },\n        x: xCalc,\n        reset: slideSteps > 2\n          ? prevIndex !== 1\n          : true\n      })\n    } else {\n      set({\n        config,\n        x: xCalc,\n        reset: false\n      })\n    }\n  }, [slideSteps, currentIndex, autoPlayInterval])\n\n  useEffect(() => {\n    if (!autoPlayInterval) return\n    set({\n      config: autoPlayInterval && !pause\n        ? { duration: autoPlayInterval }\n        : config,\n      from: { x: getX(slideSteps, currentIndex) },\n      x: getX(slideSteps, currentIndex, !pause && 1),\n      reset: true\n    })\n  }, [pause, autoPlayInterval, slideSteps, currentIndex])\n\n  return (\n    <animated.div\n      className={`sled-progress-${className}-track`}\n      style={{\n        position: 'absolute',\n        left: 0,\n        width: '100%',\n        pointerEvents: 'none',\n        transform: props.x.to(x => `translateX(-${x}%)`)\n      }}\n    />\n  )\n}\n\nexport default SledProgressTrack\n"]},"metadata":{},"sourceType":"module"}