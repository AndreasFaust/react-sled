{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect } from 'react';\nimport { useSpring, animated } from 'react-spring';\nimport { useStateContext } from './state';\nimport useDragGesture from './hooks/useDragGesture';\nimport useFocus from './hooks/useFocus';\nimport useCursor from './hooks/useCursor';\nimport useX from './hooks/useX';\nimport { useSliderStyles, useViewStyles } from './hooks/useContainerStyles';\n\nconst SledSprings = ({\n  onAnimationStart,\n  onAnimationEnd,\n  onSledEnd,\n  children\n}) => {\n  const [{\n    currentIndex,\n    viewCount,\n    direction,\n    dimensions: {\n      width,\n      height\n    },\n    config\n  }, dispatch] = useStateContext();\n  const cursor = useCursor();\n  const x = useX();\n  const [props, set] = useSpring(() => ({\n    x: 0,\n    cursor,\n    config,\n    immediate: true\n  }));\n  const springRef = React.useRef();\n  useFocus(springRef);\n  const [dimensionsUpdated, setDimensionsUpdated] = React.useState(false);\n  useEffect(() => {\n    setDimensionsUpdated(true);\n  }, [width, height]);\n  useEffect(() => {\n    if (!dimensionsUpdated) return;\n    setDimensionsUpdated(false);\n    set({\n      x,\n      immediate: true,\n      onStart: null,\n      onRest: null\n    });\n  }, [x, dimensionsUpdated]);\n  useEffect(() => {\n    if (dimensionsUpdated) return;\n    set({\n      config,\n      x,\n      cursor,\n      immediate: false,\n\n      onStart() {\n        dispatch({\n          type: 'SET_PAUSE',\n          pause: true\n        });\n        if (typeof onAnimationStart === 'function') onAnimationStart();\n      },\n\n      onRest() {\n        dispatch({\n          type: 'SET_PAUSE',\n          pause: false\n        });\n        if (typeof onAnimationEnd === 'function') onAnimationEnd();\n\n        if (currentIndex === viewCount - 1) {\n          if (typeof onSledEnd === 'function') onSledEnd();\n        }\n      }\n\n    });\n  }, [x, currentIndex, dimensionsUpdated, viewCount, cursor]);\n  const bind = useDragGesture(set);\n  const sliderStyles = useSliderStyles();\n  const viewStyles = useViewStyles();\n  return __jsx(animated.div, _extends({}, bind ? bind() : {}, {\n    className: \"sled-slider\",\n    ref: springRef,\n    style: _objectSpread({}, sliderStyles, {\n      transform: direction === 'horizontal' ? props.x.to(x => `translate3d(${x}px,0,0)`) : props.x.to(x => `translate3d(0,${x}px,0)`),\n      cursor: props.cursor\n    })\n  }), React.Children.map(children, child => __jsx(\"div\", {\n    className: \"sled-element\",\n    style: viewStyles\n  }, child)));\n};\n\nexport default SledSprings;","map":null,"metadata":{},"sourceType":"module"}