{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport { useDrag } from 'react-use-gesture';\nimport { useStateContext } from '../state';\nexport default (function (set) {\n  var _useStateContext = useStateContext(),\n      _useStateContext2 = _slicedToArray(_useStateContext, 2),\n      _useStateContext2$ = _useStateContext2[0],\n      dragging = _useStateContext2$.dragging,\n      dragDistance = _useStateContext2$.dragDistance,\n      _useStateContext2$$di = _useStateContext2$.dimensions,\n      width = _useStateContext2$$di.width,\n      height = _useStateContext2$$di.height,\n      currentIndex = _useStateContext2$.currentIndex,\n      direction = _useStateContext2$.direction,\n      stopOnInteraction = _useStateContext2$.stopOnInteraction,\n      showElements = _useStateContext2$.showElements,\n      slideBy = _useStateContext2$.slideBy,\n      dispatch = _useStateContext2[1];\n\n  var bind = useDrag(function (_ref) {\n    var down = _ref.down,\n        _ref$movement = _slicedToArray(_ref.movement, 2),\n        xDelta = _ref$movement[0],\n        yDelta = _ref$movement[1],\n        _ref$direction = _slicedToArray(_ref.direction, 2),\n        xDir = _ref$direction[0],\n        yDir = _ref$direction[1],\n        distance = _ref.distance,\n        cancel = _ref.cancel,\n        canceled = _ref.canceled;\n\n    if (canceled) return;\n\n    if (stopOnInteraction) {\n      dispatch({\n        type: 'SET_AUTOPLAY',\n        autoPlayInterval: undefined\n      });\n    }\n\n    if (down && distance > dragDistance) {\n      var dirValue = direction === 'horizontal' ? xDir : yDir;\n      dispatch({\n        type: dirValue > 0 ? 'PREV' : 'NEXT',\n        pause: true\n      });\n      cancel();\n    }\n\n    set(function () {\n      var x = direction === 'horizontal' ? -currentIndex * (width / showElements * slideBy) + (down ? xDelta : 0) : -currentIndex * (height / showElements * slideBy) + (down ? yDelta : 0);\n      return {\n        x: x,\n        immediate: false,\n        cursor: down ? 'grabbing' : 'grab',\n        onStart: undefined,\n        onRest: undefined\n      };\n    });\n    dispatch({\n      type: 'SET_PAUSE',\n      pause: true\n    });\n  });\n  return dragging && bind;\n});","map":{"version":3,"sources":["/Users/andreasfaust/components/react-sled/sled/hooks/useDragGesture.ts"],"names":["useDrag","useStateContext","set","dragging","dragDistance","dimensions","width","height","currentIndex","direction","stopOnInteraction","showElements","slideBy","dispatch","bind","down","movement","xDelta","yDelta","xDir","yDir","distance","cancel","canceled","type","autoPlayInterval","undefined","dirValue","pause","x","immediate","cursor","onStart","onRest"],"mappings":";AAAA,SAASA,OAAT,QAAwB,mBAAxB;AACA,SAASC,eAAT,QAAgC,UAAhC;AAOA,gBAAe,UAACC,GAAD,EAAgC;AAAA,yBAU9BD,eAAe,EAVe;AAAA;AAAA;AAAA,MAE3CE,QAF2C,sBAE3CA,QAF2C;AAAA,MAG3CC,YAH2C,sBAG3CA,YAH2C;AAAA,iDAI3CC,UAJ2C;AAAA,MAI7BC,KAJ6B,yBAI7BA,KAJ6B;AAAA,MAItBC,MAJsB,yBAItBA,MAJsB;AAAA,MAK3CC,YAL2C,sBAK3CA,YAL2C;AAAA,MAM3CC,SAN2C,sBAM3CA,SAN2C;AAAA,MAO3CC,iBAP2C,sBAO3CA,iBAP2C;AAAA,MAQ3CC,YAR2C,sBAQ3CA,YAR2C;AAAA,MAS3CC,OAT2C,sBAS3CA,OAT2C;AAAA,MAU1CC,QAV0C;;AAY7C,MAAMC,IAAI,GAAGd,OAAO,CAAC,gBAOf;AAAA,QANJe,IAMI,QANJA,IAMI;AAAA,4CALJC,QAKI;AAAA,QALOC,MAKP;AAAA,QALeC,MAKf;AAAA,6CAJJT,SAII;AAAA,QAJQU,IAIR;AAAA,QAJcC,IAId;AAAA,QAHJC,QAGI,QAHJA,QAGI;AAAA,QAFJC,MAEI,QAFJA,MAEI;AAAA,QADJC,QACI,QADJA,QACI;;AACJ,QAAIA,QAAJ,EAAc;;AAEd,QAAIb,iBAAJ,EAAuB;AACrBG,MAAAA,QAAQ,CAAC;AAAEW,QAAAA,IAAI,EAAE,cAAR;AAAwBC,QAAAA,gBAAgB,EAAEC;AAA1C,OAAD,CAAR;AACD;;AACD,QAAIX,IAAI,IAAIM,QAAQ,GAAGjB,YAAvB,EAAqC;AACnC,UAAMuB,QAAQ,GAAGlB,SAAS,KAAK,YAAd,GAA6BU,IAA7B,GAAoCC,IAArD;AACAP,MAAAA,QAAQ,CAAC;AACPW,QAAAA,IAAI,EAAEG,QAAQ,GAAG,CAAX,GACF,MADE,GAEF,MAHG;AAIPC,QAAAA,KAAK,EAAE;AAJA,OAAD,CAAR;AAMAN,MAAAA,MAAM;AACP;;AACDpB,IAAAA,GAAG,CAAC,YAAM;AACR,UAAM2B,CAAC,GAAGpB,SAAS,KAAK,YAAd,GACL,CAACD,YAAD,IAAiBF,KAAK,GAAGK,YAAR,GAAuBC,OAAxC,CAAD,IAAsDG,IAAI,GAAGE,MAAH,GAAY,CAAtE,CADM,GAEL,CAACT,YAAD,IAAiBD,MAAM,GAAGI,YAAT,GAAwBC,OAAzC,CAAD,IAAuDG,IAAI,GAAGG,MAAH,GAAY,CAAvE,CAFJ;AAGA,aAAO;AACLW,QAAAA,CAAC,EAADA,CADK;AAELC,QAAAA,SAAS,EAAE,KAFN;AAGLC,QAAAA,MAAM,EAAEhB,IAAI,GAAG,UAAH,GAAgB,MAHvB;AAILiB,QAAAA,OAAO,EAAEN,SAJJ;AAKLO,QAAAA,MAAM,EAAEP;AALH,OAAP;AAOD,KAXE,CAAH;AAYAb,IAAAA,QAAQ,CAAC;AAAEW,MAAAA,IAAI,EAAE,WAAR;AAAqBI,MAAAA,KAAK,EAAE;AAA5B,KAAD,CAAR;AACD,GApCmB,CAApB;AAsCA,SAAOzB,QAAQ,IAAIW,IAAnB;AACD,CAnDD","sourcesContent":["import { useDrag } from 'react-use-gesture'\nimport { useStateContext } from '../state'\nimport { SpringsUpdateFn } from 'react-spring'\n\ninterface ISet {\n  x: number\n}\n\nexport default (set: SpringsUpdateFn<ISet>) => {\n  const [{\n    dragging,\n    dragDistance,\n    dimensions: { width, height },\n    currentIndex,\n    direction,\n    stopOnInteraction,\n    showElements,\n    slideBy\n  }, dispatch] = useStateContext()\n\n  const bind = useDrag(({\n    down,\n    movement: [xDelta, yDelta],\n    direction: [xDir, yDir],\n    distance,\n    cancel,\n    canceled,\n  }) => {\n    if (canceled) return\n\n    if (stopOnInteraction) {\n      dispatch({ type: 'SET_AUTOPLAY', autoPlayInterval: undefined })\n    }\n    if (down && distance > dragDistance) {\n      const dirValue = direction === 'horizontal' ? xDir : yDir\n      dispatch({\n        type: dirValue > 0\n          ? 'PREV'\n          : 'NEXT',\n        pause: true\n      })\n      cancel()\n    }\n    set(() => {\n      const x = direction === 'horizontal'\n        ? (-currentIndex * (width / showElements * slideBy)) + (down ? xDelta : 0)\n        : (-currentIndex * (height / showElements * slideBy)) + (down ? yDelta : 0)\n      return {\n        x,\n        immediate: false,\n        cursor: down ? 'grabbing' : 'grab',\n        onStart: undefined,\n        onRest: undefined\n      }\n    })\n    dispatch({ type: 'SET_PAUSE', pause: true })\n  })\n\n  return dragging && bind\n}\n"]},"metadata":{},"sourceType":"module"}