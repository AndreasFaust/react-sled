{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport React from 'react';\nimport { debounce } from '../utils/debounce';\nimport { useStateContext } from '../state';\n\nfunction getProportion(width, height, offsetWidth, offsetHeight, proportion, dispatch) {\n  var _proportion$split = proportion.split(':'),\n      _proportion$split2 = _slicedToArray(_proportion$split, 2),\n      proportionWidth = _proportion$split2[0],\n      proportionHeight = _proportion$split2[1];\n\n  var dimensions = {\n    width: 0,\n    height: 0\n  };\n\n  if (width) {\n    var heightValue = offsetWidth * +proportionHeight / +proportionWidth;\n    dimensions = {\n      width: width,\n      height: heightValue\n    };\n  } else {\n    var widthValue = offsetHeight * +proportionWidth / +proportionHeight;\n    dimensions = {\n      width: widthValue,\n      height: height\n    };\n  }\n\n  dispatch({\n    type: 'SET_DIMENSIONS_DOM',\n    dimensions: dimensions\n  });\n}\n\nfunction getDimensions(width, height, proportion, ref, dispatch) {\n  var _ref$current = ref.current,\n      offsetWidth = _ref$current.offsetWidth,\n      offsetHeight = _ref$current.offsetHeight;\n\n  if (!width && !height) {\n    var heightValue = offsetWidth / 2;\n    console.warn('Sled-Error: You need to provide either a width or a height. Falling back to \"width: 100%\" and proportion \"2:1\".');\n    return {\n      width: '100%',\n      height: heightValue\n    };\n  }\n\n  if (width && height) {\n    dispatch({\n      type: 'SET_DIMENSIONS_DOM',\n      dimensionsDOM: {\n        width: width,\n        height: height\n      }\n    });\n  } // if (proportion) {\n\n\n  getProportion(width, height, offsetWidth, offsetHeight, proportion, dispatch); // } else {\n  // }\n}\n\nexport default (function (width, height, ref) {\n  var _useStateContext = useStateContext(),\n      _useStateContext2 = _slicedToArray(_useStateContext, 2),\n      _useStateContext2$ = _useStateContext2[0],\n      dimensionsDOM = _useStateContext2$.dimensionsDOM,\n      proportion = _useStateContext2$.proportion,\n      dispatch = _useStateContext2[1];\n\n  var _ref$current2 = ref.current,\n      offsetWidth = _ref$current2.offsetWidth,\n      offsetHeight = _ref$current2.offsetHeight;\n\n  var _React$useState = React.useState({\n    width: 0,\n    height: 0\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      dimensions = _React$useState2[0],\n      setDimensions = _React$useState2[1];\n\n  React.useEffect(function () {\n    setDimensions(function () {\n      return getDimensions(width, height, proportion, ref, dispatch);\n    });\n\n    function onResize() {\n      setDimensions(function () {\n        return getDimensions(width, height, proportion, ref, dispatch);\n      });\n    }\n\n    var dOnResize = debounce(onResize, 200);\n    window.addEventListener('resize', dOnResize);\n    return function () {\n      return window.removeEventListener('resize', dOnResize);\n    };\n  }, [width, height, proportion, ref.current]);\n  React.useEffect(function () {\n    dispatch({\n      type: 'SET_DIMENSIONS',\n      dimensions: {\n        width: offsetWidth,\n        height: offsetHeight\n      }\n    });\n  }, [dimensionsDOM.width, dimensionsDOM.height]);\n  return dimensions;\n});","map":{"version":3,"sources":["/Users/andreasfaust/components/react-sled/sled/hooks/useDimensions.ts"],"names":["React","debounce","useStateContext","getProportion","width","height","offsetWidth","offsetHeight","proportion","dispatch","split","proportionWidth","proportionHeight","dimensions","heightValue","widthValue","type","getDimensions","ref","current","console","warn","dimensionsDOM","useState","setDimensions","useEffect","onResize","dOnResize","window","addEventListener","removeEventListener"],"mappings":"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","sourcesContent":["\nimport React from 'react'\nimport { debounce } from '../utils/debounce'\nimport { useStateContext } from '../state'\nimport { TRef, TDimension } from '../state/types-defaults'\n\ninterface IDimensions {\n  width: TDimension\n  height: TDimension\n}\n\nfunction getProportion(width: TDimension, height: TDimension, offsetWidth: number, offsetHeight: number, proportion: string, dispatch) {\n  const [proportionWidth, proportionHeight] = proportion.split(':')\n  let dimensions: IDimensions = { width: 0, height: 0 }\n\n  if (width) {\n    const heightValue = (offsetWidth * +proportionHeight) / +proportionWidth\n    dimensions = {\n      width,\n      height: heightValue\n    }\n  } else {\n    const widthValue = (offsetHeight * +proportionWidth) / +proportionHeight\n    dimensions = {\n      width: widthValue,\n      height\n    }\n  }\n\n  dispatch({\n    type: 'SET_DIMENSIONS_DOM',\n    dimensions\n  })\n}\n\nfunction getDimensions(width: TDimension, height: TDimension, proportion: string, ref: TRef, dispatch) {\n  const { offsetWidth, offsetHeight } = ref.current\n\n  if (!width && !height) {\n    const heightValue = offsetWidth / 2\n    console.warn('Sled-Error: You need to provide either a width or a height. Falling back to \"width: 100%\" and proportion \"2:1\".')\n    return { width: '100%', height: heightValue }\n  }\n\n  if (width && height) {\n    dispatch({\n      type: 'SET_DIMENSIONS_DOM',\n      dimensionsDOM: { width, height }\n    })\n  }\n\n  // if (proportion) {\n  getProportion(width, height, offsetWidth, offsetHeight, proportion, dispatch)\n  // } else {\n\n  // }\n}\n\nexport default (width: TDimension, height: TDimension, ref: TRef): IDimensions => {\n  const [{ dimensionsDOM, proportion }, dispatch] = useStateContext()\n  const { offsetWidth, offsetHeight } = ref.current\n\n  const [dimensions, setDimensions] = React.useState<IDimensions>({ width: 0, height: 0 })\n\n  React.useEffect(() => {\n    setDimensions(() => getDimensions(width, height, proportion, ref, dispatch))\n    function onResize() {\n      setDimensions(() => getDimensions(width, height, proportion, ref, dispatch))\n    }\n    const dOnResize = debounce(onResize, 200)\n    window.addEventListener('resize', dOnResize)\n    return () => window.removeEventListener('resize', dOnResize)\n  }, [width, height, proportion, ref.current])\n\n  React.useEffect(() => {\n    dispatch({\n      type: 'SET_DIMENSIONS',\n      dimensions: { width: offsetWidth, height: offsetHeight }\n    })\n  }, [dimensionsDOM.width, dimensionsDOM.height])\n\n  return dimensions\n}\n"]},"metadata":{},"sourceType":"module"}