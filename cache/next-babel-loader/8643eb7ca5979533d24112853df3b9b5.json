{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { useStateContext } from '../state';\n\nfunction getProportion({\n  width,\n  height,\n  offsetWidth,\n  offsetHeight,\n  proportion,\n  dispatch\n}) {\n  if (!proportion) return;\n  const [proportionWidth, proportionHeight] = proportion.split(':');\n  let dimensions = {\n    width: 0,\n    height: 0\n  };\n\n  if (width) {\n    const heightValue = offsetWidth * +proportionHeight / +proportionWidth;\n    dimensions = {\n      width,\n      height: heightValue\n    };\n  } else {\n    const widthValue = offsetHeight * +proportionWidth / +proportionHeight;\n    dimensions = {\n      width: widthValue,\n      height\n    };\n  }\n\n  dispatch({\n    type: 'SET_DIMENSIONS',\n    dimensions: dimensions\n  });\n}\n\nexport default (ref => {\n  const [{\n    dimensionsDOM,\n    proportion\n  }, dispatch] = useStateContext();\n  React.useEffect(() => {\n    const {\n      offsetWidth,\n      offsetHeight\n    } = ref.current;\n    getProportion(_objectSpread({}, dimensionsDOM, {\n      offsetWidth,\n      offsetHeight,\n      proportion,\n      dispatch\n    }));\n  }, [dimensionsDOM, proportion]);\n});","map":{"version":3,"sources":["/Users/andreasfaust/components/react-sled/sled/hooks/useDimensions.ts"],"names":["React","useStateContext","getProportion","width","height","offsetWidth","offsetHeight","proportion","dispatch","proportionWidth","proportionHeight","split","dimensions","heightValue","widthValue","type","ref","dimensionsDOM","useEffect","current"],"mappings":";;;;;;;;;;;;AACA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,eAAT,QAAgC,UAAhC;;AAiBA,SAASC,aAAT,CAAuB;AACrBC,EAAAA,KADqB;AAErBC,EAAAA,MAFqB;AAGrBC,EAAAA,WAHqB;AAIrBC,EAAAA,YAJqB;AAKrBC,EAAAA,UALqB;AAMrBC,EAAAA;AANqB,CAAvB,EAOgB;AACd,MAAI,CAACD,UAAL,EAAiB;AAEjB,QAAM,CAACE,eAAD,EAAkBC,gBAAlB,IAAsCH,UAAU,CAACI,KAAX,CAAiB,GAAjB,CAA5C;AACA,MAAIC,UAAuB,GAAG;AAAET,IAAAA,KAAK,EAAE,CAAT;AAAYC,IAAAA,MAAM,EAAE;AAApB,GAA9B;;AAEA,MAAID,KAAJ,EAAW;AACT,UAAMU,WAAW,GAAIR,WAAW,GAAG,CAACK,gBAAhB,GAAoC,CAACD,eAAzD;AACAG,IAAAA,UAAU,GAAG;AACXT,MAAAA,KADW;AAEXC,MAAAA,MAAM,EAAES;AAFG,KAAb;AAID,GAND,MAMO;AACL,UAAMC,UAAU,GAAIR,YAAY,GAAG,CAACG,eAAjB,GAAoC,CAACC,gBAAxD;AACAE,IAAAA,UAAU,GAAG;AACXT,MAAAA,KAAK,EAAEW,UADI;AAEXV,MAAAA;AAFW,KAAb;AAID;;AAEDI,EAAAA,QAAQ,CAAC;AACPO,IAAAA,IAAI,EAAE,gBADC;AAEPH,IAAAA,UAAU,EAAEA;AAFL,GAAD,CAAR;AAID;;AAED,gBAAgBI,GAAD,IAAe;AAC5B,QAAM,CAAC;AAAEC,IAAAA,aAAF;AAAiBV,IAAAA;AAAjB,GAAD,EAAgCC,QAAhC,IAA4CP,eAAe,EAAjE;AAEAD,EAAAA,KAAK,CAACkB,SAAN,CAAgB,MAAM;AACpB,UAAM;AAAEb,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAAgCU,GAAG,CAACG,OAA1C;AACAjB,IAAAA,aAAa,mBACRe,aADQ;AAEXZ,MAAAA,WAFW;AAGXC,MAAAA,YAHW;AAIXC,MAAAA,UAJW;AAKXC,MAAAA;AALW,OAAb;AAOD,GATD,EASG,CAACS,aAAD,EAAgBV,UAAhB,CATH;AAWD,CAdD","sourcesContent":["\nimport React from 'react'\nimport { debounce } from '../utils/debounce'\nimport { useStateContext } from '../state'\nimport { TRef, TDimension } from '../state/types-defaults'\n\ninterface IProportion {\n  width: TDimension\n  height: TDimension\n  offsetWidth: number\n  offsetHeight: number\n  proportion: string\n  dispatch\n}\n\ninterface IDimensions {\n  width: TDimension\n  height: TDimension\n}\n\nfunction getProportion({\n  width,\n  height,\n  offsetWidth,\n  offsetHeight,\n  proportion,\n  dispatch\n}: IProportion) {\n  if (!proportion) return\n\n  const [proportionWidth, proportionHeight] = proportion.split(':')\n  let dimensions: IDimensions = { width: 0, height: 0 }\n\n  if (width) {\n    const heightValue = (offsetWidth * +proportionHeight) / +proportionWidth\n    dimensions = {\n      width,\n      height: heightValue\n    }\n  } else {\n    const widthValue = (offsetHeight * +proportionWidth) / +proportionHeight\n    dimensions = {\n      width: widthValue,\n      height\n    }\n  }\n\n  dispatch({\n    type: 'SET_DIMENSIONS',\n    dimensions: dimensions\n  })\n}\n\nexport default (ref: TRef) => {\n  const [{ dimensionsDOM, proportion }, dispatch] = useStateContext()\n\n  React.useEffect(() => {\n    const { offsetWidth, offsetHeight } = ref.current\n    getProportion({\n      ...dimensionsDOM,\n      offsetWidth,\n      offsetHeight,\n      proportion,\n      dispatch\n    })\n  }, [dimensionsDOM, proportion])\n\n}\n"]},"metadata":{},"sourceType":"module"}