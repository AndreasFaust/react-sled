{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { useStateContext } from '../state';\n\nfunction getProportion(_ref) {\n  var width = _ref.width,\n      height = _ref.height,\n      offsetWidth = _ref.offsetWidth,\n      offsetHeight = _ref.offsetHeight,\n      proportion = _ref.proportion,\n      dispatch = _ref.dispatch;\n  if (!proportion) return;\n\n  var _proportion$split = proportion.split(':'),\n      _proportion$split2 = _slicedToArray(_proportion$split, 2),\n      proportionWidth = _proportion$split2[0],\n      proportionHeight = _proportion$split2[1];\n\n  var dimensions = {\n    width: 0,\n    height: 0\n  };\n\n  if (width) {\n    var heightValue = offsetWidth * +proportionHeight / +proportionWidth;\n    dimensions = {\n      width: offsetWidth,\n      height: heightValue\n    };\n  } else {\n    var widthValue = offsetHeight * +proportionWidth / +proportionHeight;\n    dimensions = {\n      width: widthValue,\n      height: offsetHeight\n    };\n  }\n\n  dispatch({\n    type: 'SET_DIMENSIONS',\n    dimensions: dimensions\n  });\n}\n\nexport default (function (ref) {\n  var _useStateContext = useStateContext(),\n      _useStateContext2 = _slicedToArray(_useStateContext, 2),\n      _useStateContext2$ = _useStateContext2[0],\n      dimensionsDOM = _useStateContext2$.dimensionsDOM,\n      proportion = _useStateContext2$.proportion,\n      dispatch = _useStateContext2[1];\n\n  React.useEffect(function () {\n    var _ref$current = ref.current,\n        offsetWidth = _ref$current.offsetWidth,\n        offsetHeight = _ref$current.offsetHeight;\n    getProportion(_objectSpread({}, dimensionsDOM, {\n      offsetWidth: offsetWidth,\n      offsetHeight: offsetHeight,\n      proportion: proportion,\n      dispatch: dispatch\n    }));\n  }, [dimensionsDOM, proportion]);\n});","map":{"version":3,"sources":["/Users/andreasfaust/components/react-sled/sled/hooks/useDimensions.ts"],"names":["React","useStateContext","getProportion","width","height","offsetWidth","offsetHeight","proportion","dispatch","split","proportionWidth","proportionHeight","dimensions","heightValue","widthValue","type","ref","dimensionsDOM","useEffect","current"],"mappings":";;;;;;;;;;;;;AACA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,eAAT,QAAgC,UAAhC;;AAiBA,SAASC,aAAT,OAOgB;AAAA,MANdC,KAMc,QANdA,KAMc;AAAA,MALdC,MAKc,QALdA,MAKc;AAAA,MAJdC,WAIc,QAJdA,WAIc;AAAA,MAHdC,YAGc,QAHdA,YAGc;AAAA,MAFdC,UAEc,QAFdA,UAEc;AAAA,MADdC,QACc,QADdA,QACc;AACd,MAAI,CAACD,UAAL,EAAiB;;AADH,0BAG8BA,UAAU,CAACE,KAAX,CAAiB,GAAjB,CAH9B;AAAA;AAAA,MAGPC,eAHO;AAAA,MAGUC,gBAHV;;AAId,MAAIC,UAAuB,GAAG;AAAET,IAAAA,KAAK,EAAE,CAAT;AAAYC,IAAAA,MAAM,EAAE;AAApB,GAA9B;;AAEA,MAAID,KAAJ,EAAW;AACT,QAAMU,WAAW,GAAIR,WAAW,GAAG,CAACM,gBAAhB,GAAoC,CAACD,eAAzD;AACAE,IAAAA,UAAU,GAAG;AACXT,MAAAA,KAAK,EAAEE,WADI;AAEXD,MAAAA,MAAM,EAAES;AAFG,KAAb;AAID,GAND,MAMO;AACL,QAAMC,UAAU,GAAIR,YAAY,GAAG,CAACI,eAAjB,GAAoC,CAACC,gBAAxD;AACAC,IAAAA,UAAU,GAAG;AACXT,MAAAA,KAAK,EAAEW,UADI;AAEXV,MAAAA,MAAM,EAAEE;AAFG,KAAb;AAID;;AACDE,EAAAA,QAAQ,CAAC;AACPO,IAAAA,IAAI,EAAE,gBADC;AAEPH,IAAAA,UAAU,EAAEA;AAFL,GAAD,CAAR;AAID;;AAED,gBAAe,UAACI,GAAD,EAAe;AAAA,yBACsBf,eAAe,EADrC;AAAA;AAAA;AAAA,MACnBgB,aADmB,sBACnBA,aADmB;AAAA,MACJV,UADI,sBACJA,UADI;AAAA,MACUC,QADV;;AAG5BR,EAAAA,KAAK,CAACkB,SAAN,CAAgB,YAAM;AAAA,uBACkBF,GAAG,CAACG,OADtB;AAAA,QACZd,WADY,gBACZA,WADY;AAAA,QACCC,YADD,gBACCA,YADD;AAEpBJ,IAAAA,aAAa,mBACRe,aADQ;AAEXZ,MAAAA,WAAW,EAAXA,WAFW;AAGXC,MAAAA,YAAY,EAAZA,YAHW;AAIXC,MAAAA,UAAU,EAAVA,UAJW;AAKXC,MAAAA,QAAQ,EAARA;AALW,OAAb;AAOD,GATD,EASG,CAACS,aAAD,EAAgBV,UAAhB,CATH;AAWD,CAdD","sourcesContent":["\nimport React from 'react'\nimport { debounce } from '../utils/debounce'\nimport { useStateContext } from '../state'\nimport { TRef, TDimension } from '../state/types-defaults'\n\ninterface IProportion {\n  width: TDimension\n  height: TDimension\n  offsetWidth: number\n  offsetHeight: number\n  proportion: string\n  dispatch\n}\n\ninterface IDimensions {\n  width: TDimension\n  height: TDimension\n}\n\nfunction getProportion({\n  width,\n  height,\n  offsetWidth,\n  offsetHeight,\n  proportion,\n  dispatch\n}: IProportion) {\n  if (!proportion) return\n\n  const [proportionWidth, proportionHeight] = proportion.split(':')\n  let dimensions: IDimensions = { width: 0, height: 0 }\n\n  if (width) {\n    const heightValue = (offsetWidth * +proportionHeight) / +proportionWidth\n    dimensions = {\n      width: offsetWidth,\n      height: heightValue\n    }\n  } else {\n    const widthValue = (offsetHeight * +proportionWidth) / +proportionHeight\n    dimensions = {\n      width: widthValue,\n      height: offsetHeight\n    }\n  }\n  dispatch({\n    type: 'SET_DIMENSIONS',\n    dimensions: dimensions\n  })\n}\n\nexport default (ref: TRef) => {\n  const [{ dimensionsDOM, proportion }, dispatch] = useStateContext()\n\n  React.useEffect(() => {\n    const { offsetWidth, offsetHeight } = ref.current\n    getProportion({\n      ...dimensionsDOM,\n      offsetWidth,\n      offsetHeight,\n      proportion,\n      dispatch\n    })\n  }, [dimensionsDOM, proportion])\n\n}\n"]},"metadata":{},"sourceType":"module"}