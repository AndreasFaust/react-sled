{"ast":null,"code":"import React from 'react';\nimport { debounce } from '../utils/debounce';\nimport { useStateContext } from '../state';\n\nfunction getProportion(width, height, offsetWidth, offsetHeight, proportion, dispatch) {\n  const [proportionWidth, proportionHeight] = proportion.split(':');\n  let dimensions = {\n    width: 0,\n    height: 0\n  };\n\n  if (width) {\n    const heightValue = offsetWidth * +proportionHeight / +proportionWidth;\n    dimensions = {\n      width,\n      height: heightValue\n    };\n  } else {\n    const widthValue = offsetHeight * +proportionWidth / +proportionHeight;\n    dimensions = {\n      width: widthValue,\n      height\n    };\n  }\n\n  dispatch({\n    type: 'SET_DIMENSIONS_DOM',\n    dimensions\n  });\n  return dimensions;\n}\n\nfunction getDimensions(width, height, proportion, ref, dispatch) {\n  const {\n    offsetWidth,\n    offsetHeight\n  } = ref.current;\n\n  if (!width && !height) {\n    const heightValue = offsetWidth / 2;\n    console.warn('Sled-Error: You need to provide either a width or a height. Falling back to \"width: 100%\" and proportion \"2:1\".');\n    return {\n      width: '100%',\n      height: heightValue\n    };\n  }\n\n  if (width && height) {\n    return {\n      width,\n      height\n    };\n  } // if (proportion) {\n\n\n  return getProportion(width, height, offsetWidth, offsetHeight, proportion, dispatch); // } else {\n  // }\n}\n\nexport default ((width, height, ref) => {\n  const [{\n    dimensionsDOM,\n    proportion\n  }, dispatch] = useStateContext();\n  const {\n    offsetWidth,\n    offsetHeight\n  } = ref.current;\n  const [dimensions, setDimensions] = React.useState({\n    width: 0,\n    height: 0\n  });\n  React.useEffect(() => {\n    setDimensions(() => getDimensions(width, height, proportion, ref, dispatch));\n\n    function onResize() {\n      setDimensions(() => getDimensions(width, height, proportion, ref, dispatch));\n    }\n\n    const dOnResize = debounce(onResize, 200);\n    window.addEventListener('resize', dOnResize);\n    return () => window.removeEventListener('resize', dOnResize);\n  }, [width, height, proportion, ref.current]);\n  React.useEffect(() => {\n    dispatch({\n      type: 'SET_DIMENSIONS',\n      dimensions: {\n        width: offsetWidth,\n        height: offsetHeight\n      }\n    });\n  }, [dimensionsDOM.width, dimensionsDOM.height]);\n  return dimensions;\n});","map":{"version":3,"sources":["/Users/andreasfaust/components/react-sled/sled/hooks/useDimensions.ts"],"names":["React","debounce","useStateContext","getProportion","width","height","offsetWidth","offsetHeight","proportion","dispatch","proportionWidth","proportionHeight","split","dimensions","heightValue","widthValue","type","getDimensions","ref","current","console","warn","dimensionsDOM","setDimensions","useState","useEffect","onResize","dOnResize","window","addEventListener","removeEventListener"],"mappings":"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","sourcesContent":["\nimport React from 'react'\nimport { debounce } from '../utils/debounce'\nimport { useStateContext } from '../state'\nimport { TRef, TDimension } from '../state/types-defaults'\n\ninterface IDimensions {\n  width: TDimension\n  height: TDimension\n}\n\nfunction getProportion(width: TDimension, height: TDimension, offsetWidth: number, offsetHeight: number, proportion: string, dispatch) {\n  const [proportionWidth, proportionHeight] = proportion.split(':')\n  let dimensions: IDimensions = { width: 0, height: 0 }\n  if (width) {\n    const heightValue = (offsetWidth * +proportionHeight) / +proportionWidth\n    dimensions = {\n      width,\n      height: heightValue\n    }\n  } else {\n    const widthValue = (offsetHeight * +proportionWidth) / +proportionHeight\n    dimensions = {\n      width: widthValue,\n      height\n    }\n  }\n  dispatch({\n    type: 'SET_DIMENSIONS_DOM',\n    dimensions\n  })\n\n  return dimensions\n}\n\nfunction getDimensions(width: TDimension, height: TDimension, proportion: string, ref: TRef, dispatch): IDimensions {\n  const { offsetWidth, offsetHeight } = ref.current\n\n  if (!width && !height) {\n    const heightValue = offsetWidth / 2\n    console.warn('Sled-Error: You need to provide either a width or a height. Falling back to \"width: 100%\" and proportion \"2:1\".')\n    return { width: '100%', height: heightValue }\n  }\n\n  if (width && height) {\n    return { width, height }\n  }\n\n  // if (proportion) {\n  return getProportion(width, height, offsetWidth, offsetHeight, proportion, dispatch)\n  // } else {\n\n  // }\n}\n\nexport default (width: TDimension, height: TDimension, ref: TRef): IDimensions => {\n  const [{ dimensionsDOM, proportion }, dispatch] = useStateContext()\n  const { offsetWidth, offsetHeight } = ref.current\n\n  const [dimensions, setDimensions] = React.useState<IDimensions>({ width: 0, height: 0 })\n\n  React.useEffect(() => {\n    setDimensions(() => getDimensions(width, height, proportion, ref, dispatch))\n    function onResize() {\n      setDimensions(() => getDimensions(width, height, proportion, ref, dispatch))\n    }\n    const dOnResize = debounce(onResize, 200)\n    window.addEventListener('resize', dOnResize)\n    return () => window.removeEventListener('resize', dOnResize)\n  }, [width, height, proportion, ref.current])\n\n  React.useEffect(() => {\n    dispatch({\n      type: 'SET_DIMENSIONS',\n      dimensions: { width: offsetWidth, height: offsetHeight }\n    })\n  }, [dimensionsDOM.width, dimensionsDOM.height])\n\n  return dimensions\n}\n"]},"metadata":{},"sourceType":"module"}