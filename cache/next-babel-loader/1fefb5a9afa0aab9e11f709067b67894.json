{"ast":null,"code":"import React from 'react';\nimport { debounce } from '../utils/debounce';\nimport { useStateContext } from '../state';\n\nfunction getProportion({}) {\n  const [proportionWidth, proportionHeight] = proportion.split(':');\n  let dimensions = {\n    width: 0,\n    height: 0\n  };\n\n  if (width) {\n    const heightValue = offsetWidth * +proportionHeight / +proportionWidth;\n    dimensions = {\n      width,\n      height: heightValue\n    };\n  } else {\n    const widthValue = offsetHeight * +proportionWidth / +proportionHeight;\n    dimensions = {\n      width: widthValue,\n      height\n    };\n  }\n\n  dispatch({\n    type: 'SET_DIMENSIONS_DOM',\n    dimensions\n  });\n}\n\nfunction getDimensions(width, height, proportion, ref, dispatch) {\n  const {\n    offsetWidth,\n    offsetHeight\n  } = ref.current;\n\n  if (!width && !height) {\n    const heightValue = offsetWidth / 2;\n    console.warn('Sled-Error: You need to provide either a width or a height. Falling back to \"width: 100%\" and proportion \"2:1\".');\n    dispatch({\n      type: 'SET_DIMENSIONS_DOM',\n      dimensionsDOM: {\n        width: '100%',\n        height: heightValue\n      }\n    });\n    return;\n  }\n\n  if (width && height) {\n    dispatch({\n      type: 'SET_DIMENSIONS_DOM',\n      dimensionsDOM: {\n        width,\n        height\n      }\n    });\n    return;\n  }\n\n  getProportion(width, height, offsetWidth, offsetHeight, proportion, dispatch);\n}\n\nexport default ((width, height, ref) => {\n  const [{\n    dimensionsDOM,\n    proportion\n  }, dispatch] = useStateContext();\n  const {\n    offsetWidth,\n    offsetHeight\n  } = ref.current;\n  React.useEffect(() => {\n    getDimensions(width, height, proportion, ref, dispatch);\n\n    function onResize() {\n      getDimensions(width, height, proportion, ref, dispatch);\n    }\n\n    const dOnResize = debounce(onResize, 200);\n    window.addEventListener('resize', dOnResize);\n    return () => window.removeEventListener('resize', dOnResize);\n  }, [width, height, proportion, ref.current]);\n  React.useEffect(() => {\n    dispatch({\n      type: 'SET_DIMENSIONS',\n      dimensions: {\n        width: offsetWidth,\n        height: offsetHeight\n      }\n    });\n  }, [dimensionsDOM.width, dimensionsDOM.height]);\n});","map":{"version":3,"sources":["/Users/andreasfaust/components/react-sled/sled/hooks/useDimensions.ts"],"names":["React","debounce","useStateContext","getProportion","proportionWidth","proportionHeight","proportion","split","dimensions","width","height","heightValue","offsetWidth","widthValue","offsetHeight","dispatch","type","getDimensions","ref","current","console","warn","dimensionsDOM","useEffect","onResize","dOnResize","window","addEventListener","removeEventListener"],"mappings":"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","sourcesContent":["\nimport React from 'react'\nimport { debounce } from '../utils/debounce'\nimport { useStateContext } from '../state'\nimport { TRef, TDimension } from '../state/types-defaults'\n\ninterface IProportion {\n  width: TDimension, height: TDimension, offsetWidth: number, offsetHeight: number, proportion: string, dispatch\n}\n\nfunction getProportion<IProportion>({ }) {\n  const [proportionWidth, proportionHeight] = proportion.split(':')\n  let dimensions: IDimensions = { width: 0, height: 0 }\n\n  if (width) {\n    const heightValue = (offsetWidth * +proportionHeight) / +proportionWidth\n    dimensions = {\n      width,\n      height: heightValue\n    }\n  } else {\n    const widthValue = (offsetHeight * +proportionWidth) / +proportionHeight\n    dimensions = {\n      width: widthValue,\n      height\n    }\n  }\n\n  dispatch({\n    type: 'SET_DIMENSIONS_DOM',\n    dimensions\n  })\n}\n\nfunction getDimensions(width: TDimension, height: TDimension, proportion: string, ref: TRef, dispatch) {\n  const { offsetWidth, offsetHeight } = ref.current\n\n  if (!width && !height) {\n    const heightValue = offsetWidth / 2\n    console.warn('Sled-Error: You need to provide either a width or a height. Falling back to \"width: 100%\" and proportion \"2:1\".')\n    dispatch({\n      type: 'SET_DIMENSIONS_DOM',\n      dimensionsDOM: { width: '100%', height: heightValue }\n    })\n    return\n  }\n\n  if (width && height) {\n    dispatch({\n      type: 'SET_DIMENSIONS_DOM',\n      dimensionsDOM: { width, height }\n    })\n    return\n  }\n\n  getProportion(width, height, offsetWidth, offsetHeight, proportion, dispatch)\n}\n\nexport default (width: TDimension, height: TDimension, ref: TRef) => {\n  const [{ dimensionsDOM, proportion }, dispatch] = useStateContext()\n  const { offsetWidth, offsetHeight } = ref.current\n\n  React.useEffect(() => {\n    getDimensions(width, height, proportion, ref, dispatch)\n    function onResize() {\n      getDimensions(width, height, proportion, ref, dispatch)\n    }\n    const dOnResize = debounce(onResize, 200)\n    window.addEventListener('resize', dOnResize)\n    return () => window.removeEventListener('resize', dOnResize)\n  }, [width, height, proportion, ref.current])\n\n  React.useEffect(() => {\n    dispatch({\n      type: 'SET_DIMENSIONS',\n      dimensions: { width: offsetWidth, height: offsetHeight }\n    })\n  }, [dimensionsDOM.width, dimensionsDOM.height])\n\n}\n"]},"metadata":{},"sourceType":"module"}