{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport { useEffect, useRef } from 'react';\nimport { useStateContext } from '../state';\n\nvar useKeyboard = function useKeyboard(keyboard) {\n  var _useStateContext = useStateContext(),\n      _useStateContext2 = _slicedToArray(_useStateContext, 2),\n      _useStateContext2$ = _useStateContext2[0],\n      hasFocus = _useStateContext2$.hasFocus,\n      stopOnInteraction = _useStateContext2$.stopOnInteraction,\n      dispatch = _useStateContext2[1];\n\n  var hasFocusRef = useRef(false);\n  useEffect(function () {\n    hasFocusRef.current = hasFocus;\n  }, [hasFocus]);\n  useEffect(function () {\n    function onKeyup(event) {\n      if (!hasFocusRef.current) return;\n\n      if (stopOnInteraction) {\n        dispatch({\n          type: 'SET_AUTOPLAY',\n          autoPlayInterval: undefined\n        });\n      }\n\n      switch (event.keyCode) {\n        case 37:\n          dispatch({\n            type: 'PREV'\n          });\n          break;\n\n        case 39:\n          dispatch({\n            type: 'NEXT'\n          });\n          break;\n      }\n    }\n\n    if (keyboard) {\n      document.addEventListener('keyup', onKeyup);\n      return function () {\n        return document.removeEventListener('keyup', onKeyup);\n      };\n    }\n  }, [keyboard, stopOnInteraction]);\n};\n\nexport default useKeyboard;","map":null,"metadata":{},"sourceType":"module"}