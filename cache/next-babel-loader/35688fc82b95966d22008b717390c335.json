{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport { useDrag } from 'react-use-gesture';\nimport { useStateContext } from '../state';\nexport default (function (set) {\n  var _useStateContext = useStateContext(),\n      _useStateContext2 = _slicedToArray(_useStateContext, 2),\n      _useStateContext2$ = _useStateContext2[0],\n      dragging = _useStateContext2$.dragging,\n      dragDistance = _useStateContext2$.dragDistance,\n      _useStateContext2$$di = _useStateContext2$.dimensions,\n      width = _useStateContext2$$di.width,\n      height = _useStateContext2$$di.height,\n      currentIndex = _useStateContext2$.currentIndex,\n      direction = _useStateContext2$.direction,\n      stopOnInteraction = _useStateContext2$.stopOnInteraction,\n      showElements = _useStateContext2$.showElements,\n      slideBy = _useStateContext2$.slideBy,\n      dispatch = _useStateContext2[1];\n\n  var bind = useDrag(function (_ref) {\n    var down = _ref.down,\n        _ref$movement = _slicedToArray(_ref.movement, 2),\n        xDelta = _ref$movement[0],\n        yDelta = _ref$movement[1],\n        _ref$direction = _slicedToArray(_ref.direction, 2),\n        xDir = _ref$direction[0],\n        yDir = _ref$direction[1],\n        distance = _ref.distance,\n        cancel = _ref.cancel,\n        canceled = _ref.canceled;\n\n    if (canceled) return;\n\n    if (stopOnInteraction) {\n      dispatch({\n        type: 'SET_AUTOPLAY',\n        autoPlayInterval: undefined\n      });\n    }\n\n    if (down && distance > dragDistance) {\n      var dirValue = direction === 'horizontal' ? xDir : yDir;\n      dispatch({\n        type: dirValue > 0 ? 'PREV' : 'NEXT',\n        pause: true\n      });\n      cancel();\n    }\n\n    set(function () {\n      var x = direction === 'horizontal' ? -currentIndex * (width / showElements * slideBy) + (down ? xDelta : 0) : -currentIndex * (height / showElements * slideBy) + (down ? yDelta : 0);\n      return {\n        x: x,\n        immediate: false,\n        cursor: down ? 'grabbing' : 'grab',\n        onStart: undefined,\n        onRest: undefined\n      };\n    });\n    dispatch({\n      type: 'SET_PAUSE',\n      pause: true\n    });\n  });\n  return dragging && bind;\n});","map":null,"metadata":{},"sourceType":"module"}