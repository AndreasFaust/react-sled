{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { createContext, useContext, useReducer } from 'react';\nexport const StateContext = createContext();\nconst initialState = {\n  select: 3,\n  rewind: true,\n  direction: 'horizontal',\n  showElements: 1,\n  slideBy: 1,\n  pauseOnMouseOver: true,\n  stopOnInteraction: true,\n  keyboard: true,\n  dragging: true,\n  dragDistance: 100,\n  autoPlayInterval: 3000,\n  width: '100%',\n  proportion: '2:1',\n  clamp: true,\n  mass: 1,\n  tension: 170,\n  friction: 26\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'select':\n      return _objectSpread({}, state, {\n        select: action.value\n      });\n\n    case 'proportion':\n      return _objectSpread({}, state, {\n        proportion: action.value\n      });\n\n    case 'direction':\n      return _objectSpread({}, state, {\n        direction: action.value\n      });\n\n    case 'rewind':\n      return _objectSpread({}, state, {\n        rewind: action.value\n      });\n\n    case 'pauseOnMouseOver':\n      return _objectSpread({}, state, {\n        pauseOnMouseOver: action.value\n      });\n\n    case 'stopOnInteraction':\n      return _objectSpread({}, state, {\n        stopOnInteraction: action.value\n      });\n\n    case 'keyboard':\n      return _objectSpread({}, state, {\n        keyboard: action.value\n      });\n\n    case 'dragging':\n      return _objectSpread({}, state, {\n        dragging: action.value\n      });\n\n    case 'dragDistance':\n      return _objectSpread({}, state, {\n        dragDistance: action.value\n      });\n\n    case 'autoPlayInterval':\n      return _objectSpread({}, state, {\n        autoPlayInterval: action.value\n      });\n\n    case 'width':\n      return _objectSpread({}, state, {\n        width: action.value\n      });\n\n    case 'height':\n      return _objectSpread({}, state, {\n        height: action.value\n      });\n\n    case 'clamp':\n      return _objectSpread({}, state, {\n        clamp: action.value\n      });\n\n    case 'mass':\n      return _objectSpread({}, state, {\n        mass: action.value\n      });\n\n    case 'tension':\n      return _objectSpread({}, state, {\n        tension: action.value\n      });\n\n    case 'friction':\n      return _objectSpread({}, state, {\n        friction: action.value\n      });\n\n    case 'showElements':\n      return _objectSpread({}, state, {\n        showElements: action.value\n      });\n\n    case 'slideBy':\n      return _objectSpread({}, state, {\n        slideBy: action.value\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport const StateProvider = ({\n  children\n}) => __jsx(StateContext.Provider, {\n  value: useReducer(reducer, initialState)\n}, children);\nexport const useStateValue = () => useContext(StateContext);","map":null,"metadata":{},"sourceType":"module"}