{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport { useSpring, animated } from 'react-spring';\nimport { useStateContext } from '../state';\n\nfunction getX(slideSteps, currentIndex) {\n  var goPrevNext = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  return 100 - 100 / slideSteps * (currentIndex + goPrevNext);\n}\n\nvar SledProgressTrack = function SledProgressTrack(_ref) {\n  var className = _ref.className;\n\n  var _useStateContext = useStateContext(),\n      _useStateContext2 = _slicedToArray(_useStateContext, 1),\n      _useStateContext2$ = _useStateContext2[0],\n      currentIndex = _useStateContext2$.currentIndex,\n      prevIndex = _useStateContext2$.prevIndex,\n      slideSteps = _useStateContext2$.slideSteps,\n      autoPlayInterval = _useStateContext2$.autoPlayInterval,\n      pause = _useStateContext2$.pause,\n      pauseOnMouseOver = _useStateContext2$.pauseOnMouseOver,\n      config = _useStateContext2$.config;\n\n  var _useSpring = useSpring(function () {\n    return {\n      from: {\n        x: 100\n      }\n    };\n  }),\n      _useSpring2 = _slicedToArray(_useSpring, 2),\n      props = _useSpring2[0],\n      set = _useSpring2[1];\n\n  useEffect(function () {\n    if (pauseOnMouseOver) {\n      set({\n        config: config,\n        x: getX(slideSteps, currentIndex),\n        reset: false\n      });\n    }\n  }, [pauseOnMouseOver]);\n  useEffect(function () {\n    if (!slideSteps) return;\n    var xCalc = getX(slideSteps, currentIndex, !autoPlayInterval && 1);\n\n    if (currentIndex === 0) {\n      set({\n        config: config,\n        from: {\n          x: 100\n        },\n        x: xCalc,\n        reset: slideSteps > 2 ? prevIndex !== 1 : true\n      });\n    } else {\n      set({\n        config: config,\n        x: xCalc,\n        reset: false\n      });\n    }\n  }, [slideSteps, currentIndex, autoPlayInterval]);\n  useEffect(function () {\n    if (!autoPlayInterval) return;\n    set({\n      config: autoPlayInterval && !pause ? {\n        duration: autoPlayInterval\n      } : config,\n      from: {\n        x: getX(slideSteps, currentIndex)\n      },\n      x: getX(slideSteps, currentIndex, !pause && 1),\n      reset: true\n    });\n  }, [pause, autoPlayInterval, slideSteps, currentIndex]);\n  return __jsx(animated.div, {\n    className: \"sled-progress-\".concat(className, \"-track\"),\n    style: {\n      position: 'absolute',\n      left: 0,\n      width: '100%',\n      pointerEvents: 'none',\n      transform: props.x.to(function (x) {\n        return \"translateX(-\".concat(x, \"%)\");\n      })\n    }\n  });\n};\n\nexport default SledProgressTrack;","map":null,"metadata":{},"sourceType":"module"}