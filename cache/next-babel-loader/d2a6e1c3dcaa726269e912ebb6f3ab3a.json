{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport React from 'react';\nimport { debounce } from '../utils/debounce';\nimport { useStateContext } from '../state';\n\nfunction getProportion(width, height, offsetWidth, offsetHeight, proportion) {\n  var dimensionsForState = {};\n  var dimensionsForDom = {};\n\n  var _proportion$split = proportion.split(':'),\n      _proportion$split2 = _slicedToArray(_proportion$split, 2),\n      proportionWidth = _proportion$split2[0],\n      proportionHeight = _proportion$split2[1];\n\n  if (width) {\n    var heightValue = offsetWidth * +proportionHeight / +proportionWidth;\n    dimensionsForState = {\n      width: offsetWidth,\n      height: heightValue\n    };\n    dimensionsForDom = {\n      width: width,\n      height: heightValue\n    };\n  } else {\n    var widthValue = offsetHeight * +proportionWidth / +proportionHeight;\n    dimensionsForState = {\n      width: widthValue,\n      height: offsetHeight\n    };\n    dimensionsForDom = {\n      width: widthValue,\n      height: height\n    };\n  }\n\n  return [dimensionsForState, dimensionsForDom];\n}\n\nfunction getDimensions(width, height, proportion, ref, dispatch) {\n  var dimensions = [{\n    width: offsetWidth,\n    height: offsetHeight\n  }, // for state\n  {\n    width: width,\n    height: height\n  } // for DOM\n  ];\n\n  if (!width && !height) {\n    var heightValue = offsetWidth / 2;\n    dispatch({\n      type: 'SET_DIMENSIONS',\n      dimensions: {\n        width: offsetWidth,\n        height: heightValue\n      }\n    });\n    console.warn('Sled-Error: You need to provide either a width or a height. Falling back to \"width: 100%\" and proportion \"2:1\".');\n    return {\n      width: '100%',\n      height: heightValue\n    };\n  }\n\n  if (proportion) {\n    var _getProportion = getProportion(width, height, offsetWidth, offsetHeight, proportion),\n        _getProportion2 = _slicedToArray(_getProportion, 2),\n        dimensionsForState = _getProportion2[0],\n        _dimensionsForDom = _getProportion2[1];\n  }\n\n  return dimensionsForDom;\n}\n\nexport default (function (width, height, ref) {\n  var _useStateContext = useStateContext(),\n      _useStateContext2 = _slicedToArray(_useStateContext, 2),\n      _useStateContext2$ = _useStateContext2[0],\n      dimensionsDOM = _useStateContext2$.dimensionsDOM,\n      proportion = _useStateContext2$.proportion,\n      dispatch = _useStateContext2[1];\n\n  var _ref$current = ref.current,\n      offsetWidth = _ref$current.offsetWidth,\n      offsetHeight = _ref$current.offsetHeight;\n\n  var _React$useState = React.useState({\n    width: 0,\n    height: 0\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      dimensions = _React$useState2[0],\n      setDimensions = _React$useState2[1];\n\n  React.useEffect(function () {\n    setDimensions(function () {\n      return getDimensions(width, height, proportion, ref, dispatch);\n    });\n\n    function onResize() {\n      setDimensions(function () {\n        return getDimensions(width, height, proportion, ref, dispatch);\n      });\n    }\n\n    var dOnResize = debounce(onResize, 200);\n    window.addEventListener('resize', dOnResize);\n    return function () {\n      return window.removeEventListener('resize', dOnResize);\n    };\n  }, [width, height, proportion, ref.current]);\n  React.useEffect(function () {\n    dispatch({\n      type: 'SET_DIMENSIONS',\n      dimensions: {\n        width: offsetWidth,\n        height: offsetHeight\n      }\n    });\n  }, [dimensionsDOM.width, dimensionsDOM.height]);\n  return dimensions;\n});","map":{"version":3,"sources":["/Users/andreasfaust/components/react-sled/sled/hooks/useDimensions.ts"],"names":["React","debounce","useStateContext","getProportion","width","height","offsetWidth","offsetHeight","proportion","dimensionsForState","dimensionsForDom","split","proportionWidth","proportionHeight","heightValue","widthValue","getDimensions","ref","dispatch","dimensions","type","console","warn","dimensionsDOM","current","useState","setDimensions","useEffect","onResize","dOnResize","window","addEventListener","removeEventListener"],"mappings":"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","sourcesContent":["\nimport React from 'react'\nimport { debounce } from '../utils/debounce'\nimport { useStateContext } from '../state'\nimport { TRef, TDimension } from '../state/types-defaults'\n\ninterface IDimensions {\n  width: TDimension\n  height: TDimension\n}\n\nfunction getProportion(width: TDimension, height: TDimension, offsetWidth: number, offsetHeight: number, proportion: string) {\n  let dimensionsForState = {}\n  let dimensionsForDom = {}\n  const [proportionWidth, proportionHeight] = proportion.split(':')\n  if (width) {\n    const heightValue = (offsetWidth * +proportionHeight) / +proportionWidth\n    dimensionsForState = {\n      width: offsetWidth,\n      height: heightValue\n    }\n    dimensionsForDom = {\n      width,\n      height: heightValue\n    }\n  } else {\n    const widthValue = (offsetHeight * +proportionWidth) / +proportionHeight\n    dimensionsForState = {\n      width: widthValue,\n      height: offsetHeight\n    }\n    dimensionsForDom = {\n      width: widthValue,\n      height\n    }\n  }\n  return [dimensionsForState, dimensionsForDom]\n}\n\nfunction getDimensions(width: TDimension, height: TDimension, proportion: string, ref: TRef, dispatch): IDimensions {\n  const dimensions: [IDimensions, IDimensions] = [\n    { width: offsetWidth, height: offsetHeight }, // for state\n    { width, height } // for DOM\n  ]\n\n  if (!width && !height) {\n    const heightValue = offsetWidth / 2\n    dispatch({\n      type: 'SET_DIMENSIONS',\n      dimensions: { width: offsetWidth, height: heightValue }\n    })\n    console.warn('Sled-Error: You need to provide either a width or a height. Falling back to \"width: 100%\" and proportion \"2:1\".')\n    return { width: '100%', height: heightValue }\n  }\n\n  if (proportion) {\n    let [dimensionsForState, dimensionsForDom] = getProportion(width, height, offsetWidth, offsetHeight, proportion)\n  }\n\n\n  return dimensionsForDom\n}\n\nexport default (width: TDimension, height: TDimension, ref: TRef): IDimensions => {\n  const [{ dimensionsDOM, proportion }, dispatch] = useStateContext()\n  const { offsetWidth, offsetHeight } = ref.current\n\n  const [dimensions, setDimensions] = React.useState<IDimensions>({ width: 0, height: 0 })\n\n  React.useEffect(() => {\n    setDimensions(() => getDimensions(width, height, proportion, ref, dispatch))\n    function onResize() {\n      setDimensions(() => getDimensions(width, height, proportion, ref, dispatch))\n    }\n    const dOnResize = debounce(onResize, 200)\n    window.addEventListener('resize', dOnResize)\n    return () => window.removeEventListener('resize', dOnResize)\n  }, [width, height, proportion, ref.current])\n\n  React.useEffect(() => {\n    dispatch({\n      type: 'SET_DIMENSIONS',\n      dimensions: { width: offsetWidth, height: offsetHeight }\n    })\n  }, [dimensionsDOM.width, dimensionsDOM.height])\n\n  return dimensions\n}\n"]},"metadata":{},"sourceType":"module"}