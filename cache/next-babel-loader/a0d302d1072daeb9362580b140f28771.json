{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport { useStateContext } from '../../state';\nimport { useDirectionDisabled } from './useDirectionDisabled';\n\nfunction getClassName(type, select, className) {\n  var _useStateContext = useStateContext(),\n      _useStateContext2 = _slicedToArray(_useStateContext, 1),\n      currentIndex = _useStateContext2[0].currentIndex;\n\n  var directionDisabled = useDirectionDisabled(select);\n  var baseClass = 'sled-control';\n  var typeClass = \"\".concat(baseClass, \"-\").concat(type);\n  var typeClassSpecific = \"\".concat(typeClass, \"-\").concat(select);\n  var distinctClass = \"\".concat(baseClass, \"-\").concat(className || type + '-default');\n  var disabledClasses = [\"\".concat(baseClass, \"-disabled\"), \"\".concat(typeClass, \"-disabled\"), \"\".concat(distinctClass, \"-disabled\")];\n  var activeClasses = [\"\".concat(baseClass, \"-active\"), \"\".concat(typeClass, \"-active\"), \"\".concat(distinctClass, \"-active\")];\n  var classes = [baseClass, typeClass, typeClassSpecific, distinctClass];\n\n  if (select === currentIndex) {\n    // isActive\n    return [].concat(classes, activeClasses).join(' ');\n  }\n\n  if (directionDisabled) {\n    return [].concat(classes, disabledClasses).join(' ');\n  }\n\n  return classes.join(' ');\n}\n\nexport default (function (select, className) {\n  switch (typeof select) {\n    case 'number':\n      return getClassName('index', select, className);\n\n    case 'string':\n    default:\n      return getClassName('direction', select, className);\n  }\n});","map":{"version":3,"sources":["/Users/andreasfaust/components/react-sled/sled/control/hooks/useClassName.ts"],"names":["useStateContext","useDirectionDisabled","getClassName","type","select","className","currentIndex","directionDisabled","baseClass","typeClass","typeClassSpecific","distinctClass","disabledClasses","activeClasses","classes","join"],"mappings":";AACA,SAASA,eAAT,QAAgC,aAAhC;AACA,SAASC,oBAAT,QAAqC,wBAArC;;AAEA,SAASC,YAAT,CAAsBC,IAAtB,EAAmDC,MAAnD,EAAoEC,SAApE,EAA+F;AAAA,yBAClEL,eAAe,EADmD;AAAA;AAAA,MACpFM,YADoF,wBACpFA,YADoF;;AAG7F,MAAMC,iBAAiB,GAAGN,oBAAoB,CAACG,MAAD,CAA9C;AAEA,MAAMI,SAAiB,GAAG,cAA1B;AACA,MAAMC,SAAiB,aAAMD,SAAN,cAAmBL,IAAnB,CAAvB;AACA,MAAMO,iBAAyB,aAAMD,SAAN,cAAmBL,MAAnB,CAA/B;AACA,MAAMO,aAAqB,aAAMH,SAAN,cAAmBH,SAAS,IAAIF,IAAI,GAAG,UAAvC,CAA3B;AACA,MAAMS,eAAyB,GAAG,WAC7BJ,SAD6B,0BAE7BC,SAF6B,0BAG7BE,aAH6B,eAAlC;AAKA,MAAME,aAAuB,GAAG,WAC3BL,SAD2B,wBAE3BC,SAF2B,wBAG3BE,aAH2B,aAAhC;AAMA,MAAMG,OAAiB,GAAG,CACxBN,SADwB,EAExBC,SAFwB,EAGxBC,iBAHwB,EAIxBC,aAJwB,CAA1B;;AAOA,MAAIP,MAAM,KAAKE,YAAf,EAA6B;AAAE;AAC7B,WAAO,UAAIQ,OAAJ,EAAgBD,aAAhB,EAA+BE,IAA/B,CAAoC,GAApC,CAAP;AACD;;AACD,MAAIR,iBAAJ,EAAuB;AACrB,WAAO,UAAIO,OAAJ,EAAgBF,eAAhB,EAAiCG,IAAjC,CAAsC,GAAtC,CAAP;AACD;;AACD,SAAOD,OAAO,CAACC,IAAR,CAAa,GAAb,CAAP;AACD;;AAED,gBAAe,UAACX,MAAD,EAAkBC,SAAlB,EAAwC;AACrD,UAAQ,OAAOD,MAAf;AACE,SAAK,QAAL;AACE,aAAOF,YAAY,CAAC,OAAD,EAAUE,MAAV,EAAkBC,SAAlB,CAAnB;;AACF,SAAK,QAAL;AACA;AACE,aAAOH,YAAY,CAAC,WAAD,EAAcE,MAAd,EAAsBC,SAAtB,CAAnB;AALJ;AAOD,CARD","sourcesContent":["import { TSelect } from \"../../state/types-defaults\"\nimport { useStateContext } from '../../state'\nimport { useDirectionDisabled } from './useDirectionDisabled'\n\nfunction getClassName(type: 'index' | 'direction', select: TSelect, className: string): string {\n  const [{ currentIndex }] = useStateContext()\n\n  const directionDisabled = useDirectionDisabled(select)\n\n  const baseClass: string = 'sled-control'\n  const typeClass: string = `${baseClass}-${type}`\n  const typeClassSpecific: string = `${typeClass}-${select}`\n  const distinctClass: string = `${baseClass}-${className || type + '-default'}`\n  const disabledClasses: string[] = [\n    `${baseClass}-disabled`,\n    `${typeClass}-disabled`,\n    `${distinctClass}-disabled`\n  ]\n  const activeClasses: string[] = [\n    `${baseClass}-active`,\n    `${typeClass}-active`,\n    `${distinctClass}-active`\n  ]\n\n  const classes: string[] = [\n    baseClass,\n    typeClass,\n    typeClassSpecific,\n    distinctClass,\n  ]\n\n  if (select === currentIndex) { // isActive\n    return [...classes, ...activeClasses].join(' ')\n  }\n  if (directionDisabled) {\n    return [...classes, ...disabledClasses].join(' ')\n  }\n  return classes.join(' ')\n}\n\nexport default (select: TSelect, className: string) => {\n  switch (typeof select) {\n    case 'number':\n      return getClassName('index', select, className)\n    case 'string':\n    default:\n      return getClassName('direction', select, className)\n  }\n}"]},"metadata":{},"sourceType":"module"}