{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport React from 'react';\nimport { debounce } from '../utils/debounce';\nimport { useStateContext } from '../state';\n\nfunction getProportion(width, height, proportion) {\n  var _proportion$split = proportion.split(':'),\n      _proportion$split2 = _slicedToArray(_proportion$split, 2),\n      proportionWidth = _proportion$split2[0],\n      proportionHeight = _proportion$split2[1];\n\n  if (width) {\n    var heightValue = offsetWidth * +proportionHeight / +proportionWidth;\n    dimensions = {\n      width: offsetWidth,\n      height: heightValue\n    };\n    returnDimensions = {\n      width: width,\n      height: heightValue\n    };\n  } else {\n    var widthValue = offsetHeight * +proportionWidth / +proportionHeight;\n    dimensions = {\n      width: widthValue,\n      height: offsetHeight\n    };\n    returnDimensions = {\n      width: widthValue,\n      height: height\n    };\n  }\n\n  return;\n}\n\nfunction getDimensions(width, height, proportion, ref, dispatch) {\n  var _ref$current = ref.current,\n      offsetWidth = _ref$current.offsetWidth,\n      offsetHeight = _ref$current.offsetHeight;\n  var dimensions = {\n    width: offsetWidth,\n    height: offsetHeight\n  };\n  var returnDimensions = {\n    width: width,\n    height: height\n  };\n  console.log(width, height);\n\n  if (!width && !height) {\n    var heightValue = offsetWidth / 2;\n    dimensions = {\n      width: offsetWidth,\n      height: heightValue\n    };\n    returnDimensions = {\n      width: '100%',\n      height: heightValue\n    };\n    console.warn('Sled-Error: You need to provide either a width or a height. Falling back to \"width: 100%\" and proportion \"2:1\".');\n  }\n\n  if (proportion) {\n    var _proportion$split3 = proportion.split(':'),\n        _proportion$split4 = _slicedToArray(_proportion$split3, 2),\n        proportionWidth = _proportion$split4[0],\n        proportionHeight = _proportion$split4[1];\n\n    if (width) {\n      var _heightValue = offsetWidth * +proportionHeight / +proportionWidth;\n\n      dimensions = {\n        width: offsetWidth,\n        height: _heightValue\n      };\n      returnDimensions = {\n        width: width,\n        height: _heightValue\n      };\n    } else {\n      var widthValue = offsetHeight * +proportionWidth / +proportionHeight;\n      dimensions = {\n        width: widthValue,\n        height: offsetHeight\n      };\n      returnDimensions = {\n        width: widthValue,\n        height: height\n      };\n    }\n  }\n\n  dispatch({\n    type: 'SET_DIMENSIONS',\n    dimensions: dimensions\n  });\n  return returnDimensions;\n}\n\nexport default (function (width, height, ref) {\n  var _useStateContext = useStateContext(),\n      _useStateContext2 = _slicedToArray(_useStateContext, 2),\n      proportion = _useStateContext2[0].proportion,\n      dispatch = _useStateContext2[1];\n\n  var _React$useState = React.useState({\n    width: 0,\n    height: 0\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      dimensions = _React$useState2[0],\n      setDimensions = _React$useState2[1];\n\n  React.useEffect(function () {\n    setDimensions(function () {\n      return getDimensions(width, height, proportion, ref, dispatch);\n    });\n\n    function onResize() {\n      setDimensions(function () {\n        return getDimensions(width, height, proportion, ref, dispatch);\n      });\n    }\n\n    var dOnResize = debounce(onResize, 200);\n    window.addEventListener('resize', dOnResize);\n    return function () {\n      return window.removeEventListener('resize', dOnResize);\n    };\n  }, [width, height, proportion, ref.current]);\n  return dimensions;\n});","map":{"version":3,"sources":["/Users/andreasfaust/components/react-sled/sled/hooks/useDimensions.ts"],"names":["React","debounce","useStateContext","getProportion","width","height","proportion","split","proportionWidth","proportionHeight","heightValue","offsetWidth","dimensions","returnDimensions","widthValue","offsetHeight","getDimensions","ref","dispatch","current","console","log","warn","type","useState","setDimensions","useEffect","onResize","dOnResize","window","addEventListener","removeEventListener"],"mappings":"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","sourcesContent":["\nimport React from 'react'\nimport { debounce } from '../utils/debounce'\nimport { useStateContext } from '../state'\nimport { TRef, TDimension } from '../state/types-defaults'\n\ninterface IDimensions {\n  width: TDimension\n  height: TDimension\n}\n\nfunction getProportion(width: TDimension, height: TDimension, proportion: string) {\n  const [proportionWidth, proportionHeight] = proportion.split(':')\n  if (width) {\n    const heightValue = (offsetWidth * +proportionHeight) / +proportionWidth\n    dimensions = {\n      width: offsetWidth,\n      height: heightValue\n    }\n    returnDimensions = {\n      width,\n      height: heightValue\n    }\n  } else {\n    const widthValue = (offsetHeight * +proportionWidth) / +proportionHeight\n    dimensions = {\n      width: widthValue,\n      height: offsetHeight\n    }\n    returnDimensions = {\n      width: widthValue,\n      height\n    }\n  }\n  return\n}\n\nfunction getDimensions(width: TDimension, height: TDimension, proportion: string, ref: TRef, dispatch): IDimensions {\n  const { offsetWidth, offsetHeight } = ref.current\n  let dimensions: IDimensions = { width: offsetWidth, height: offsetHeight }\n  let returnDimensions: IDimensions = { width, height }\n\n  console.log(width, height)\n  if (!width && !height) {\n    const heightValue = offsetWidth / 2\n    dimensions = { width: offsetWidth, height: heightValue }\n    returnDimensions = { width: '100%', height: heightValue }\n    console.warn('Sled-Error: You need to provide either a width or a height. Falling back to \"width: 100%\" and proportion \"2:1\".')\n  }\n\n  if (proportion) {\n    const [proportionWidth, proportionHeight] = proportion.split(':')\n    if (width) {\n      const heightValue = (offsetWidth * +proportionHeight) / +proportionWidth\n      dimensions = {\n        width: offsetWidth,\n        height: heightValue\n      }\n      returnDimensions = {\n        width,\n        height: heightValue\n      }\n    } else {\n      const widthValue = (offsetHeight * +proportionWidth) / +proportionHeight\n      dimensions = {\n        width: widthValue,\n        height: offsetHeight\n      }\n      returnDimensions = {\n        width: widthValue,\n        height\n      }\n    }\n  }\n\n  dispatch({\n    type: 'SET_DIMENSIONS',\n    dimensions\n  })\n\n  return returnDimensions\n}\n\nexport default (width: TDimension, height: TDimension, ref: TRef): IDimensions => {\n  const [{ proportion }, dispatch] = useStateContext()\n\n  const [dimensions, setDimensions] = React.useState<IDimensions>({ width: 0, height: 0 })\n\n  React.useEffect(() => {\n    setDimensions(() => getDimensions(width, height, proportion, ref, dispatch))\n    function onResize() {\n      setDimensions(() => getDimensions(width, height, proportion, ref, dispatch))\n    }\n    const dOnResize = debounce(onResize, 200)\n    window.addEventListener('resize', dOnResize)\n    return () => window.removeEventListener('resize', dOnResize)\n  }, [width, height, proportion, ref.current])\n\n  return dimensions\n}\n"]},"metadata":{},"sourceType":"module"}